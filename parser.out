Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> instruction_set
Rule 2     instruction -> expression
Rule 3     instruction -> conditional
Rule 4     instruction -> loopconditional
Rule 5     instruction_set -> instruction instruction_set
Rule 6     instruction_set -> { instruction_set }
Rule 7     instruction_set -> <empty>
Rule 8     identifier -> ID
Rule 9     identifier -> address
Rule 10    expression -> assignment ;
Rule 11    expression -> operation ;
Rule 12    assignment -> identifier = operand
Rule 13    assignment -> identifier = operation
Rule 14    assignment -> identifier assignoperation operand
Rule 15    assignment -> identifier assignoperation operation
Rule 16    operation -> operand operator operand
Rule 17    operation -> operand operator operation
Rule 18    operation -> function ( operand )
Rule 19    operation -> function ( operation )
Rule 20    operation -> reservedoperation
Rule 21    operation -> operand selfoperator
Rule 22    assignoperation -> ADDASSIGN
Rule 23    assignoperation -> SUBASSIGN
Rule 24    assignoperation -> MULASSIGN
Rule 25    assignoperation -> DIVASSIGN
Rule 26    operand -> identifier
Rule 27    operand -> number
Rule 28    operand -> structure
Rule 29    operand -> - operand
Rule 30    operand -> address
Rule 31    operator -> +
Rule 32    operator -> -
Rule 33    operator -> *
Rule 34    operator -> /
Rule 35    operator -> DOTADD
Rule 36    operator -> DOTSUB
Rule 37    operator -> DOTMUL
Rule 38    operator -> DOTDIV
Rule 39    selfoperator -> '
Rule 40    function -> ZEROS
Rule 41    function -> ONES
Rule 42    function -> EYE
Rule 43    reservedoperation -> RETURN operation
Rule 44    reservedoperation -> RETURN operand
Rule 45    reservedoperation -> RETURN
Rule 46    reservedoperation -> PRINT series
Rule 47    reservedoperation -> PRINT operation
Rule 48    reservedoperation -> PRINT operand
Rule 49    reservedoperation -> BREAK
Rule 50    reservedoperation -> CONTINUE
Rule 51    relation -> EQ
Rule 52    relation -> NOTEQ
Rule 53    relation -> LESS
Rule 54    relation -> LESSEQ
Rule 55    relation -> MORE
Rule 56    relation -> MOREEQ
Rule 57    condition -> operand relation operand
Rule 58    condition -> operation relation operand
Rule 59    condition -> operand relation operation
Rule 60    condition -> operation relation operation
Rule 61    conditional -> IF ( condition ) instruction
Rule 62    conditional -> IF ( condition ) { instruction_set }
Rule 63    conditional -> IF ( condition ) instruction ELSE instruction
Rule 64    conditional -> IF ( condition ) { instruction_set } ELSE instruction
Rule 65    conditional -> IF ( condition ) instruction ELSE { instruction_set }
Rule 66    conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set }
Rule 67    loopconditional -> WHILE ( condition ) instruction
Rule 68    loopconditional -> WHILE ( condition ) { instruction_set }
Rule 69    loopconditional -> FOR identifier = range instruction
Rule 70    loopconditional -> FOR identifier = range { instruction_set }
Rule 71    range -> operand : operand
Rule 72    structure -> matrix
Rule 73    structure -> STRING
Rule 74    matrix -> rows
Rule 75    matrix -> [ rows ]
Rule 76    rows -> [ series ]
Rule 77    rows -> [ series ] , rows
Rule 78    series -> operand
Rule 79    series -> operand , series
Rule 80    integer_series -> number
Rule 81    integer_series -> number , integer_series
Rule 82    number -> INTNUM
Rule 83    number -> FLOATNUM
Rule 84    address -> identifier [ integer_series ]

Terminals, with rules where they appear

'                    : 39
(                    : 18 19 61 62 63 64 65 66 67 68
)                    : 18 19 61 62 63 64 65 66 67 68
*                    : 33
+                    : 31
,                    : 77 79 81
-                    : 29 32
/                    : 34
:                    : 71
;                    : 10 11
=                    : 12 13 69 70
ADDASSIGN            : 22
BREAK                : 49
CONTINUE             : 50
DIVASSIGN            : 25
DOTADD               : 35
DOTDIV               : 38
DOTMUL               : 37
DOTSUB               : 36
ELSE                 : 63 64 65 66
EQ                   : 51
EYE                  : 42
FLOATNUM             : 83
FOR                  : 69 70
ID                   : 8
IF                   : 61 62 63 64 65 66
INTNUM               : 82
LESS                 : 53
LESSEQ               : 54
MORE                 : 55
MOREEQ               : 56
MULASSIGN            : 24
NOTEQ                : 52
ONES                 : 41
PRINT                : 46 47 48
RETURN               : 43 44 45
STRING               : 73
SUBASSIGN            : 23
WHILE                : 67 68
ZEROS                : 40
[                    : 75 76 77 84
]                    : 75 76 77 84
error                : 
{                    : 6 62 64 65 66 66 68 70
}                    : 6 62 64 65 66 66 68 70

Nonterminals, with rules where they appear

address              : 9 30
assignment           : 10
assignoperation      : 14 15
condition            : 61 62 63 64 65 66 67 68
conditional          : 3
expression           : 2
function             : 18 19
identifier           : 12 13 14 15 26 69 70 84
instruction          : 5 61 63 63 64 65 67 69
instruction_set      : 1 5 6 62 64 65 66 66 68 70
integer_series       : 81 84
loopconditional      : 4
matrix               : 72
number               : 27 80 81
operand              : 12 14 16 16 17 18 21 29 44 48 57 57 58 59 71 71 78 79
operation            : 11 13 15 17 19 43 47 58 59 60 60
operator             : 16 17
range                : 69 70
relation             : 57 58 59 60
reservedoperation    : 20
rows                 : 74 75 77
selfoperator         : 21
series               : 46 76 77 79
start                : 0
structure            : 28

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . instruction_set
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    $end            reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    start                          shift and go to state 1
    instruction_set                shift and go to state 2
    instruction                    shift and go to state 3
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 1

    (0) S' -> start .



state 2

    (1) start -> instruction_set .

    $end            reduce using rule 1 (start -> instruction_set .)


state 3

    (5) instruction_set -> instruction . instruction_set
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    $end            reduce using rule 7 (instruction_set -> .)
    }               reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction                    shift and go to state 3
    instruction_set                shift and go to state 35
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 4

    (6) instruction_set -> { . instruction_set }
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    }               reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction_set                shift and go to state 36
    instruction                    shift and go to state 3
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 5

    (2) instruction -> expression .

    {               reduce using rule 2 (instruction -> expression .)
    IF              reduce using rule 2 (instruction -> expression .)
    WHILE           reduce using rule 2 (instruction -> expression .)
    FOR             reduce using rule 2 (instruction -> expression .)
    ID              reduce using rule 2 (instruction -> expression .)
    -               reduce using rule 2 (instruction -> expression .)
    ZEROS           reduce using rule 2 (instruction -> expression .)
    ONES            reduce using rule 2 (instruction -> expression .)
    EYE             reduce using rule 2 (instruction -> expression .)
    RETURN          reduce using rule 2 (instruction -> expression .)
    PRINT           reduce using rule 2 (instruction -> expression .)
    BREAK           reduce using rule 2 (instruction -> expression .)
    CONTINUE        reduce using rule 2 (instruction -> expression .)
    INTNUM          reduce using rule 2 (instruction -> expression .)
    FLOATNUM        reduce using rule 2 (instruction -> expression .)
    STRING          reduce using rule 2 (instruction -> expression .)
    [               reduce using rule 2 (instruction -> expression .)
    $end            reduce using rule 2 (instruction -> expression .)
    }               reduce using rule 2 (instruction -> expression .)
    ELSE            reduce using rule 2 (instruction -> expression .)


state 6

    (3) instruction -> conditional .

    {               reduce using rule 3 (instruction -> conditional .)
    IF              reduce using rule 3 (instruction -> conditional .)
    WHILE           reduce using rule 3 (instruction -> conditional .)
    FOR             reduce using rule 3 (instruction -> conditional .)
    ID              reduce using rule 3 (instruction -> conditional .)
    -               reduce using rule 3 (instruction -> conditional .)
    ZEROS           reduce using rule 3 (instruction -> conditional .)
    ONES            reduce using rule 3 (instruction -> conditional .)
    EYE             reduce using rule 3 (instruction -> conditional .)
    RETURN          reduce using rule 3 (instruction -> conditional .)
    PRINT           reduce using rule 3 (instruction -> conditional .)
    BREAK           reduce using rule 3 (instruction -> conditional .)
    CONTINUE        reduce using rule 3 (instruction -> conditional .)
    INTNUM          reduce using rule 3 (instruction -> conditional .)
    FLOATNUM        reduce using rule 3 (instruction -> conditional .)
    STRING          reduce using rule 3 (instruction -> conditional .)
    [               reduce using rule 3 (instruction -> conditional .)
    $end            reduce using rule 3 (instruction -> conditional .)
    }               reduce using rule 3 (instruction -> conditional .)
    ELSE            reduce using rule 3 (instruction -> conditional .)


state 7

    (4) instruction -> loopconditional .

    {               reduce using rule 4 (instruction -> loopconditional .)
    IF              reduce using rule 4 (instruction -> loopconditional .)
    WHILE           reduce using rule 4 (instruction -> loopconditional .)
    FOR             reduce using rule 4 (instruction -> loopconditional .)
    ID              reduce using rule 4 (instruction -> loopconditional .)
    -               reduce using rule 4 (instruction -> loopconditional .)
    ZEROS           reduce using rule 4 (instruction -> loopconditional .)
    ONES            reduce using rule 4 (instruction -> loopconditional .)
    EYE             reduce using rule 4 (instruction -> loopconditional .)
    RETURN          reduce using rule 4 (instruction -> loopconditional .)
    PRINT           reduce using rule 4 (instruction -> loopconditional .)
    BREAK           reduce using rule 4 (instruction -> loopconditional .)
    CONTINUE        reduce using rule 4 (instruction -> loopconditional .)
    INTNUM          reduce using rule 4 (instruction -> loopconditional .)
    FLOATNUM        reduce using rule 4 (instruction -> loopconditional .)
    STRING          reduce using rule 4 (instruction -> loopconditional .)
    [               reduce using rule 4 (instruction -> loopconditional .)
    $end            reduce using rule 4 (instruction -> loopconditional .)
    }               reduce using rule 4 (instruction -> loopconditional .)
    ELSE            reduce using rule 4 (instruction -> loopconditional .)


state 8

    (10) expression -> assignment . ;

    ;               shift and go to state 37


state 9

    (11) expression -> operation . ;

    ;               shift and go to state 38


state 10

    (61) conditional -> IF . ( condition ) instruction
    (62) conditional -> IF . ( condition ) { instruction_set }
    (63) conditional -> IF . ( condition ) instruction ELSE instruction
    (64) conditional -> IF . ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> IF . ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> IF . ( condition ) { instruction_set } ELSE { instruction_set }

    (               shift and go to state 39


state 11

    (67) loopconditional -> WHILE . ( condition ) instruction
    (68) loopconditional -> WHILE . ( condition ) { instruction_set }

    (               shift and go to state 40


state 12

    (69) loopconditional -> FOR . identifier = range instruction
    (70) loopconditional -> FOR . identifier = range { instruction_set }
    (8) identifier -> . ID
    (9) identifier -> . address
    (84) address -> . identifier [ integer_series ]

    ID              shift and go to state 17

    identifier                     shift and go to state 41
    address                        shift and go to state 42

state 13

    (12) assignment -> identifier . = operand
    (13) assignment -> identifier . = operation
    (14) assignment -> identifier . assignoperation operand
    (15) assignment -> identifier . assignoperation operation
    (26) operand -> identifier .
    (84) address -> identifier . [ integer_series ]
    (22) assignoperation -> . ADDASSIGN
    (23) assignoperation -> . SUBASSIGN
    (24) assignoperation -> . MULASSIGN
    (25) assignoperation -> . DIVASSIGN

    =               shift and go to state 43
    +               reduce using rule 26 (operand -> identifier .)
    -               reduce using rule 26 (operand -> identifier .)
    *               reduce using rule 26 (operand -> identifier .)
    /               reduce using rule 26 (operand -> identifier .)
    DOTADD          reduce using rule 26 (operand -> identifier .)
    DOTSUB          reduce using rule 26 (operand -> identifier .)
    DOTMUL          reduce using rule 26 (operand -> identifier .)
    DOTDIV          reduce using rule 26 (operand -> identifier .)
    '               reduce using rule 26 (operand -> identifier .)
    [               shift and go to state 45
    ADDASSIGN       shift and go to state 46
    SUBASSIGN       shift and go to state 47
    MULASSIGN       shift and go to state 48
    DIVASSIGN       shift and go to state 49

    assignoperation                shift and go to state 44

state 14

    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 15

    (18) operation -> function . ( operand )
    (19) operation -> function . ( operation )

    (               shift and go to state 61


state 16

    (20) operation -> reservedoperation .

    ;               reduce using rule 20 (operation -> reservedoperation .)
    EQ              reduce using rule 20 (operation -> reservedoperation .)
    NOTEQ           reduce using rule 20 (operation -> reservedoperation .)
    LESS            reduce using rule 20 (operation -> reservedoperation .)
    LESSEQ          reduce using rule 20 (operation -> reservedoperation .)
    MORE            reduce using rule 20 (operation -> reservedoperation .)
    MOREEQ          reduce using rule 20 (operation -> reservedoperation .)
    )               reduce using rule 20 (operation -> reservedoperation .)


state 17

    (8) identifier -> ID .

    =               reduce using rule 8 (identifier -> ID .)
    [               reduce using rule 8 (identifier -> ID .)
    ADDASSIGN       reduce using rule 8 (identifier -> ID .)
    SUBASSIGN       reduce using rule 8 (identifier -> ID .)
    MULASSIGN       reduce using rule 8 (identifier -> ID .)
    DIVASSIGN       reduce using rule 8 (identifier -> ID .)
    +               reduce using rule 8 (identifier -> ID .)
    -               reduce using rule 8 (identifier -> ID .)
    *               reduce using rule 8 (identifier -> ID .)
    /               reduce using rule 8 (identifier -> ID .)
    DOTADD          reduce using rule 8 (identifier -> ID .)
    DOTSUB          reduce using rule 8 (identifier -> ID .)
    DOTMUL          reduce using rule 8 (identifier -> ID .)
    DOTDIV          reduce using rule 8 (identifier -> ID .)
    '               reduce using rule 8 (identifier -> ID .)
    ;               reduce using rule 8 (identifier -> ID .)
    EQ              reduce using rule 8 (identifier -> ID .)
    NOTEQ           reduce using rule 8 (identifier -> ID .)
    LESS            reduce using rule 8 (identifier -> ID .)
    LESSEQ          reduce using rule 8 (identifier -> ID .)
    MORE            reduce using rule 8 (identifier -> ID .)
    MOREEQ          reduce using rule 8 (identifier -> ID .)
    )               reduce using rule 8 (identifier -> ID .)
    ,               reduce using rule 8 (identifier -> ID .)
    ]               reduce using rule 8 (identifier -> ID .)
    :               reduce using rule 8 (identifier -> ID .)
    {               reduce using rule 8 (identifier -> ID .)
    IF              reduce using rule 8 (identifier -> ID .)
    WHILE           reduce using rule 8 (identifier -> ID .)
    FOR             reduce using rule 8 (identifier -> ID .)
    ID              reduce using rule 8 (identifier -> ID .)
    ZEROS           reduce using rule 8 (identifier -> ID .)
    ONES            reduce using rule 8 (identifier -> ID .)
    EYE             reduce using rule 8 (identifier -> ID .)
    RETURN          reduce using rule 8 (identifier -> ID .)
    PRINT           reduce using rule 8 (identifier -> ID .)
    BREAK           reduce using rule 8 (identifier -> ID .)
    CONTINUE        reduce using rule 8 (identifier -> ID .)
    INTNUM          reduce using rule 8 (identifier -> ID .)
    FLOATNUM        reduce using rule 8 (identifier -> ID .)
    STRING          reduce using rule 8 (identifier -> ID .)


state 18

    (9) identifier -> address .
    (30) operand -> address .

  ! reduce/reduce conflict for + resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for - resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for * resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for / resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTADD resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTSUB resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTMUL resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTDIV resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ' resolved using rule 9 (identifier -> address .)
    =               reduce using rule 9 (identifier -> address .)
    [               reduce using rule 9 (identifier -> address .)
    ADDASSIGN       reduce using rule 9 (identifier -> address .)
    SUBASSIGN       reduce using rule 9 (identifier -> address .)
    MULASSIGN       reduce using rule 9 (identifier -> address .)
    DIVASSIGN       reduce using rule 9 (identifier -> address .)
    +               reduce using rule 9 (identifier -> address .)
    -               reduce using rule 9 (identifier -> address .)
    *               reduce using rule 9 (identifier -> address .)
    /               reduce using rule 9 (identifier -> address .)
    DOTADD          reduce using rule 9 (identifier -> address .)
    DOTSUB          reduce using rule 9 (identifier -> address .)
    DOTMUL          reduce using rule 9 (identifier -> address .)
    DOTDIV          reduce using rule 9 (identifier -> address .)
    '               reduce using rule 9 (identifier -> address .)

  ! +               [ reduce using rule 30 (operand -> address .) ]
  ! -               [ reduce using rule 30 (operand -> address .) ]
  ! *               [ reduce using rule 30 (operand -> address .) ]
  ! /               [ reduce using rule 30 (operand -> address .) ]
  ! DOTADD          [ reduce using rule 30 (operand -> address .) ]
  ! DOTSUB          [ reduce using rule 30 (operand -> address .) ]
  ! DOTMUL          [ reduce using rule 30 (operand -> address .) ]
  ! DOTDIV          [ reduce using rule 30 (operand -> address .) ]
  ! '               [ reduce using rule 30 (operand -> address .) ]


state 19

    (27) operand -> number .

    +               reduce using rule 27 (operand -> number .)
    -               reduce using rule 27 (operand -> number .)
    *               reduce using rule 27 (operand -> number .)
    /               reduce using rule 27 (operand -> number .)
    DOTADD          reduce using rule 27 (operand -> number .)
    DOTSUB          reduce using rule 27 (operand -> number .)
    DOTMUL          reduce using rule 27 (operand -> number .)
    DOTDIV          reduce using rule 27 (operand -> number .)
    '               reduce using rule 27 (operand -> number .)
    ;               reduce using rule 27 (operand -> number .)
    EQ              reduce using rule 27 (operand -> number .)
    NOTEQ           reduce using rule 27 (operand -> number .)
    LESS            reduce using rule 27 (operand -> number .)
    LESSEQ          reduce using rule 27 (operand -> number .)
    MORE            reduce using rule 27 (operand -> number .)
    MOREEQ          reduce using rule 27 (operand -> number .)
    )               reduce using rule 27 (operand -> number .)
    ,               reduce using rule 27 (operand -> number .)
    ]               reduce using rule 27 (operand -> number .)
    :               reduce using rule 27 (operand -> number .)
    {               reduce using rule 27 (operand -> number .)
    IF              reduce using rule 27 (operand -> number .)
    WHILE           reduce using rule 27 (operand -> number .)
    FOR             reduce using rule 27 (operand -> number .)
    ID              reduce using rule 27 (operand -> number .)
    ZEROS           reduce using rule 27 (operand -> number .)
    ONES            reduce using rule 27 (operand -> number .)
    EYE             reduce using rule 27 (operand -> number .)
    RETURN          reduce using rule 27 (operand -> number .)
    PRINT           reduce using rule 27 (operand -> number .)
    BREAK           reduce using rule 27 (operand -> number .)
    CONTINUE        reduce using rule 27 (operand -> number .)
    INTNUM          reduce using rule 27 (operand -> number .)
    FLOATNUM        reduce using rule 27 (operand -> number .)
    STRING          reduce using rule 27 (operand -> number .)
    [               reduce using rule 27 (operand -> number .)


state 20

    (28) operand -> structure .

    +               reduce using rule 28 (operand -> structure .)
    -               reduce using rule 28 (operand -> structure .)
    *               reduce using rule 28 (operand -> structure .)
    /               reduce using rule 28 (operand -> structure .)
    DOTADD          reduce using rule 28 (operand -> structure .)
    DOTSUB          reduce using rule 28 (operand -> structure .)
    DOTMUL          reduce using rule 28 (operand -> structure .)
    DOTDIV          reduce using rule 28 (operand -> structure .)
    '               reduce using rule 28 (operand -> structure .)
    ;               reduce using rule 28 (operand -> structure .)
    EQ              reduce using rule 28 (operand -> structure .)
    NOTEQ           reduce using rule 28 (operand -> structure .)
    LESS            reduce using rule 28 (operand -> structure .)
    LESSEQ          reduce using rule 28 (operand -> structure .)
    MORE            reduce using rule 28 (operand -> structure .)
    MOREEQ          reduce using rule 28 (operand -> structure .)
    )               reduce using rule 28 (operand -> structure .)
    ,               reduce using rule 28 (operand -> structure .)
    ]               reduce using rule 28 (operand -> structure .)
    :               reduce using rule 28 (operand -> structure .)
    {               reduce using rule 28 (operand -> structure .)
    IF              reduce using rule 28 (operand -> structure .)
    WHILE           reduce using rule 28 (operand -> structure .)
    FOR             reduce using rule 28 (operand -> structure .)
    ID              reduce using rule 28 (operand -> structure .)
    ZEROS           reduce using rule 28 (operand -> structure .)
    ONES            reduce using rule 28 (operand -> structure .)
    EYE             reduce using rule 28 (operand -> structure .)
    RETURN          reduce using rule 28 (operand -> structure .)
    PRINT           reduce using rule 28 (operand -> structure .)
    BREAK           reduce using rule 28 (operand -> structure .)
    CONTINUE        reduce using rule 28 (operand -> structure .)
    INTNUM          reduce using rule 28 (operand -> structure .)
    FLOATNUM        reduce using rule 28 (operand -> structure .)
    STRING          reduce using rule 28 (operand -> structure .)
    [               reduce using rule 28 (operand -> structure .)


state 21

    (29) operand -> - . operand
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    operand                        shift and go to state 62
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 22

    (40) function -> ZEROS .

    (               reduce using rule 40 (function -> ZEROS .)


state 23

    (41) function -> ONES .

    (               reduce using rule 41 (function -> ONES .)


state 24

    (42) function -> EYE .

    (               reduce using rule 42 (function -> EYE .)


state 25

    (43) reservedoperation -> RETURN . operation
    (44) reservedoperation -> RETURN . operand
    (45) reservedoperation -> RETURN .
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    ;               reduce using rule 45 (reservedoperation -> RETURN .)
    EQ              reduce using rule 45 (reservedoperation -> RETURN .)
    NOTEQ           reduce using rule 45 (reservedoperation -> RETURN .)
    LESS            reduce using rule 45 (reservedoperation -> RETURN .)
    LESSEQ          reduce using rule 45 (reservedoperation -> RETURN .)
    MORE            reduce using rule 45 (reservedoperation -> RETURN .)
    MOREEQ          reduce using rule 45 (reservedoperation -> RETURN .)
    )               reduce using rule 45 (reservedoperation -> RETURN .)
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    operation                      shift and go to state 65
    operand                        shift and go to state 66
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 26

    (46) reservedoperation -> PRINT . series
    (47) reservedoperation -> PRINT . operation
    (48) reservedoperation -> PRINT . operand
    (78) series -> . operand
    (79) series -> . operand , series
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    series                         shift and go to state 67
    operation                      shift and go to state 68
    operand                        shift and go to state 69
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 27

    (49) reservedoperation -> BREAK .

    ;               reduce using rule 49 (reservedoperation -> BREAK .)
    EQ              reduce using rule 49 (reservedoperation -> BREAK .)
    NOTEQ           reduce using rule 49 (reservedoperation -> BREAK .)
    LESS            reduce using rule 49 (reservedoperation -> BREAK .)
    LESSEQ          reduce using rule 49 (reservedoperation -> BREAK .)
    MORE            reduce using rule 49 (reservedoperation -> BREAK .)
    MOREEQ          reduce using rule 49 (reservedoperation -> BREAK .)
    )               reduce using rule 49 (reservedoperation -> BREAK .)


state 28

    (50) reservedoperation -> CONTINUE .

    ;               reduce using rule 50 (reservedoperation -> CONTINUE .)
    EQ              reduce using rule 50 (reservedoperation -> CONTINUE .)
    NOTEQ           reduce using rule 50 (reservedoperation -> CONTINUE .)
    LESS            reduce using rule 50 (reservedoperation -> CONTINUE .)
    LESSEQ          reduce using rule 50 (reservedoperation -> CONTINUE .)
    MORE            reduce using rule 50 (reservedoperation -> CONTINUE .)
    MOREEQ          reduce using rule 50 (reservedoperation -> CONTINUE .)
    )               reduce using rule 50 (reservedoperation -> CONTINUE .)


state 29

    (75) matrix -> [ . rows ]
    (76) rows -> [ . series ]
    (77) rows -> [ . series ] , rows
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows
    (78) series -> . operand
    (79) series -> . operand , series
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]

    [               shift and go to state 70
    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33

    rows                           shift and go to state 71
    series                         shift and go to state 72
    operand                        shift and go to state 73
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32

state 30

    (82) number -> INTNUM .

    +               reduce using rule 82 (number -> INTNUM .)
    -               reduce using rule 82 (number -> INTNUM .)
    *               reduce using rule 82 (number -> INTNUM .)
    /               reduce using rule 82 (number -> INTNUM .)
    DOTADD          reduce using rule 82 (number -> INTNUM .)
    DOTSUB          reduce using rule 82 (number -> INTNUM .)
    DOTMUL          reduce using rule 82 (number -> INTNUM .)
    DOTDIV          reduce using rule 82 (number -> INTNUM .)
    '               reduce using rule 82 (number -> INTNUM .)
    ;               reduce using rule 82 (number -> INTNUM .)
    EQ              reduce using rule 82 (number -> INTNUM .)
    NOTEQ           reduce using rule 82 (number -> INTNUM .)
    LESS            reduce using rule 82 (number -> INTNUM .)
    LESSEQ          reduce using rule 82 (number -> INTNUM .)
    MORE            reduce using rule 82 (number -> INTNUM .)
    MOREEQ          reduce using rule 82 (number -> INTNUM .)
    )               reduce using rule 82 (number -> INTNUM .)
    ,               reduce using rule 82 (number -> INTNUM .)
    ]               reduce using rule 82 (number -> INTNUM .)
    :               reduce using rule 82 (number -> INTNUM .)
    {               reduce using rule 82 (number -> INTNUM .)
    IF              reduce using rule 82 (number -> INTNUM .)
    WHILE           reduce using rule 82 (number -> INTNUM .)
    FOR             reduce using rule 82 (number -> INTNUM .)
    ID              reduce using rule 82 (number -> INTNUM .)
    ZEROS           reduce using rule 82 (number -> INTNUM .)
    ONES            reduce using rule 82 (number -> INTNUM .)
    EYE             reduce using rule 82 (number -> INTNUM .)
    RETURN          reduce using rule 82 (number -> INTNUM .)
    PRINT           reduce using rule 82 (number -> INTNUM .)
    BREAK           reduce using rule 82 (number -> INTNUM .)
    CONTINUE        reduce using rule 82 (number -> INTNUM .)
    INTNUM          reduce using rule 82 (number -> INTNUM .)
    FLOATNUM        reduce using rule 82 (number -> INTNUM .)
    STRING          reduce using rule 82 (number -> INTNUM .)
    [               reduce using rule 82 (number -> INTNUM .)


state 31

    (83) number -> FLOATNUM .

    +               reduce using rule 83 (number -> FLOATNUM .)
    -               reduce using rule 83 (number -> FLOATNUM .)
    *               reduce using rule 83 (number -> FLOATNUM .)
    /               reduce using rule 83 (number -> FLOATNUM .)
    DOTADD          reduce using rule 83 (number -> FLOATNUM .)
    DOTSUB          reduce using rule 83 (number -> FLOATNUM .)
    DOTMUL          reduce using rule 83 (number -> FLOATNUM .)
    DOTDIV          reduce using rule 83 (number -> FLOATNUM .)
    '               reduce using rule 83 (number -> FLOATNUM .)
    ;               reduce using rule 83 (number -> FLOATNUM .)
    EQ              reduce using rule 83 (number -> FLOATNUM .)
    NOTEQ           reduce using rule 83 (number -> FLOATNUM .)
    LESS            reduce using rule 83 (number -> FLOATNUM .)
    LESSEQ          reduce using rule 83 (number -> FLOATNUM .)
    MORE            reduce using rule 83 (number -> FLOATNUM .)
    MOREEQ          reduce using rule 83 (number -> FLOATNUM .)
    )               reduce using rule 83 (number -> FLOATNUM .)
    ,               reduce using rule 83 (number -> FLOATNUM .)
    ]               reduce using rule 83 (number -> FLOATNUM .)
    :               reduce using rule 83 (number -> FLOATNUM .)
    {               reduce using rule 83 (number -> FLOATNUM .)
    IF              reduce using rule 83 (number -> FLOATNUM .)
    WHILE           reduce using rule 83 (number -> FLOATNUM .)
    FOR             reduce using rule 83 (number -> FLOATNUM .)
    ID              reduce using rule 83 (number -> FLOATNUM .)
    ZEROS           reduce using rule 83 (number -> FLOATNUM .)
    ONES            reduce using rule 83 (number -> FLOATNUM .)
    EYE             reduce using rule 83 (number -> FLOATNUM .)
    RETURN          reduce using rule 83 (number -> FLOATNUM .)
    PRINT           reduce using rule 83 (number -> FLOATNUM .)
    BREAK           reduce using rule 83 (number -> FLOATNUM .)
    CONTINUE        reduce using rule 83 (number -> FLOATNUM .)
    INTNUM          reduce using rule 83 (number -> FLOATNUM .)
    FLOATNUM        reduce using rule 83 (number -> FLOATNUM .)
    STRING          reduce using rule 83 (number -> FLOATNUM .)
    [               reduce using rule 83 (number -> FLOATNUM .)


state 32

    (72) structure -> matrix .

    +               reduce using rule 72 (structure -> matrix .)
    -               reduce using rule 72 (structure -> matrix .)
    *               reduce using rule 72 (structure -> matrix .)
    /               reduce using rule 72 (structure -> matrix .)
    DOTADD          reduce using rule 72 (structure -> matrix .)
    DOTSUB          reduce using rule 72 (structure -> matrix .)
    DOTMUL          reduce using rule 72 (structure -> matrix .)
    DOTDIV          reduce using rule 72 (structure -> matrix .)
    '               reduce using rule 72 (structure -> matrix .)
    ;               reduce using rule 72 (structure -> matrix .)
    EQ              reduce using rule 72 (structure -> matrix .)
    NOTEQ           reduce using rule 72 (structure -> matrix .)
    LESS            reduce using rule 72 (structure -> matrix .)
    LESSEQ          reduce using rule 72 (structure -> matrix .)
    MORE            reduce using rule 72 (structure -> matrix .)
    MOREEQ          reduce using rule 72 (structure -> matrix .)
    )               reduce using rule 72 (structure -> matrix .)
    ,               reduce using rule 72 (structure -> matrix .)
    ]               reduce using rule 72 (structure -> matrix .)
    :               reduce using rule 72 (structure -> matrix .)
    {               reduce using rule 72 (structure -> matrix .)
    IF              reduce using rule 72 (structure -> matrix .)
    WHILE           reduce using rule 72 (structure -> matrix .)
    FOR             reduce using rule 72 (structure -> matrix .)
    ID              reduce using rule 72 (structure -> matrix .)
    ZEROS           reduce using rule 72 (structure -> matrix .)
    ONES            reduce using rule 72 (structure -> matrix .)
    EYE             reduce using rule 72 (structure -> matrix .)
    RETURN          reduce using rule 72 (structure -> matrix .)
    PRINT           reduce using rule 72 (structure -> matrix .)
    BREAK           reduce using rule 72 (structure -> matrix .)
    CONTINUE        reduce using rule 72 (structure -> matrix .)
    INTNUM          reduce using rule 72 (structure -> matrix .)
    FLOATNUM        reduce using rule 72 (structure -> matrix .)
    STRING          reduce using rule 72 (structure -> matrix .)
    [               reduce using rule 72 (structure -> matrix .)


state 33

    (73) structure -> STRING .

    +               reduce using rule 73 (structure -> STRING .)
    -               reduce using rule 73 (structure -> STRING .)
    *               reduce using rule 73 (structure -> STRING .)
    /               reduce using rule 73 (structure -> STRING .)
    DOTADD          reduce using rule 73 (structure -> STRING .)
    DOTSUB          reduce using rule 73 (structure -> STRING .)
    DOTMUL          reduce using rule 73 (structure -> STRING .)
    DOTDIV          reduce using rule 73 (structure -> STRING .)
    '               reduce using rule 73 (structure -> STRING .)
    ;               reduce using rule 73 (structure -> STRING .)
    EQ              reduce using rule 73 (structure -> STRING .)
    NOTEQ           reduce using rule 73 (structure -> STRING .)
    LESS            reduce using rule 73 (structure -> STRING .)
    LESSEQ          reduce using rule 73 (structure -> STRING .)
    MORE            reduce using rule 73 (structure -> STRING .)
    MOREEQ          reduce using rule 73 (structure -> STRING .)
    )               reduce using rule 73 (structure -> STRING .)
    ,               reduce using rule 73 (structure -> STRING .)
    ]               reduce using rule 73 (structure -> STRING .)
    :               reduce using rule 73 (structure -> STRING .)
    {               reduce using rule 73 (structure -> STRING .)
    IF              reduce using rule 73 (structure -> STRING .)
    WHILE           reduce using rule 73 (structure -> STRING .)
    FOR             reduce using rule 73 (structure -> STRING .)
    ID              reduce using rule 73 (structure -> STRING .)
    ZEROS           reduce using rule 73 (structure -> STRING .)
    ONES            reduce using rule 73 (structure -> STRING .)
    EYE             reduce using rule 73 (structure -> STRING .)
    RETURN          reduce using rule 73 (structure -> STRING .)
    PRINT           reduce using rule 73 (structure -> STRING .)
    BREAK           reduce using rule 73 (structure -> STRING .)
    CONTINUE        reduce using rule 73 (structure -> STRING .)
    INTNUM          reduce using rule 73 (structure -> STRING .)
    FLOATNUM        reduce using rule 73 (structure -> STRING .)
    STRING          reduce using rule 73 (structure -> STRING .)
    [               reduce using rule 73 (structure -> STRING .)


state 34

    (74) matrix -> rows .

    +               reduce using rule 74 (matrix -> rows .)
    -               reduce using rule 74 (matrix -> rows .)
    *               reduce using rule 74 (matrix -> rows .)
    /               reduce using rule 74 (matrix -> rows .)
    DOTADD          reduce using rule 74 (matrix -> rows .)
    DOTSUB          reduce using rule 74 (matrix -> rows .)
    DOTMUL          reduce using rule 74 (matrix -> rows .)
    DOTDIV          reduce using rule 74 (matrix -> rows .)
    '               reduce using rule 74 (matrix -> rows .)
    ;               reduce using rule 74 (matrix -> rows .)
    EQ              reduce using rule 74 (matrix -> rows .)
    NOTEQ           reduce using rule 74 (matrix -> rows .)
    LESS            reduce using rule 74 (matrix -> rows .)
    LESSEQ          reduce using rule 74 (matrix -> rows .)
    MORE            reduce using rule 74 (matrix -> rows .)
    MOREEQ          reduce using rule 74 (matrix -> rows .)
    )               reduce using rule 74 (matrix -> rows .)
    ,               reduce using rule 74 (matrix -> rows .)
    ]               reduce using rule 74 (matrix -> rows .)
    :               reduce using rule 74 (matrix -> rows .)
    {               reduce using rule 74 (matrix -> rows .)
    IF              reduce using rule 74 (matrix -> rows .)
    WHILE           reduce using rule 74 (matrix -> rows .)
    FOR             reduce using rule 74 (matrix -> rows .)
    ID              reduce using rule 74 (matrix -> rows .)
    ZEROS           reduce using rule 74 (matrix -> rows .)
    ONES            reduce using rule 74 (matrix -> rows .)
    EYE             reduce using rule 74 (matrix -> rows .)
    RETURN          reduce using rule 74 (matrix -> rows .)
    PRINT           reduce using rule 74 (matrix -> rows .)
    BREAK           reduce using rule 74 (matrix -> rows .)
    CONTINUE        reduce using rule 74 (matrix -> rows .)
    INTNUM          reduce using rule 74 (matrix -> rows .)
    FLOATNUM        reduce using rule 74 (matrix -> rows .)
    STRING          reduce using rule 74 (matrix -> rows .)
    [               reduce using rule 74 (matrix -> rows .)


state 35

    (5) instruction_set -> instruction instruction_set .

    $end            reduce using rule 5 (instruction_set -> instruction instruction_set .)
    }               reduce using rule 5 (instruction_set -> instruction instruction_set .)


state 36

    (6) instruction_set -> { instruction_set . }

    }               shift and go to state 74


state 37

    (10) expression -> assignment ; .

    {               reduce using rule 10 (expression -> assignment ; .)
    IF              reduce using rule 10 (expression -> assignment ; .)
    WHILE           reduce using rule 10 (expression -> assignment ; .)
    FOR             reduce using rule 10 (expression -> assignment ; .)
    ID              reduce using rule 10 (expression -> assignment ; .)
    -               reduce using rule 10 (expression -> assignment ; .)
    ZEROS           reduce using rule 10 (expression -> assignment ; .)
    ONES            reduce using rule 10 (expression -> assignment ; .)
    EYE             reduce using rule 10 (expression -> assignment ; .)
    RETURN          reduce using rule 10 (expression -> assignment ; .)
    PRINT           reduce using rule 10 (expression -> assignment ; .)
    BREAK           reduce using rule 10 (expression -> assignment ; .)
    CONTINUE        reduce using rule 10 (expression -> assignment ; .)
    INTNUM          reduce using rule 10 (expression -> assignment ; .)
    FLOATNUM        reduce using rule 10 (expression -> assignment ; .)
    STRING          reduce using rule 10 (expression -> assignment ; .)
    [               reduce using rule 10 (expression -> assignment ; .)
    $end            reduce using rule 10 (expression -> assignment ; .)
    }               reduce using rule 10 (expression -> assignment ; .)
    ELSE            reduce using rule 10 (expression -> assignment ; .)


state 38

    (11) expression -> operation ; .

    {               reduce using rule 11 (expression -> operation ; .)
    IF              reduce using rule 11 (expression -> operation ; .)
    WHILE           reduce using rule 11 (expression -> operation ; .)
    FOR             reduce using rule 11 (expression -> operation ; .)
    ID              reduce using rule 11 (expression -> operation ; .)
    -               reduce using rule 11 (expression -> operation ; .)
    ZEROS           reduce using rule 11 (expression -> operation ; .)
    ONES            reduce using rule 11 (expression -> operation ; .)
    EYE             reduce using rule 11 (expression -> operation ; .)
    RETURN          reduce using rule 11 (expression -> operation ; .)
    PRINT           reduce using rule 11 (expression -> operation ; .)
    BREAK           reduce using rule 11 (expression -> operation ; .)
    CONTINUE        reduce using rule 11 (expression -> operation ; .)
    INTNUM          reduce using rule 11 (expression -> operation ; .)
    FLOATNUM        reduce using rule 11 (expression -> operation ; .)
    STRING          reduce using rule 11 (expression -> operation ; .)
    [               reduce using rule 11 (expression -> operation ; .)
    $end            reduce using rule 11 (expression -> operation ; .)
    }               reduce using rule 11 (expression -> operation ; .)
    ELSE            reduce using rule 11 (expression -> operation ; .)


state 39

    (61) conditional -> IF ( . condition ) instruction
    (62) conditional -> IF ( . condition ) { instruction_set }
    (63) conditional -> IF ( . condition ) instruction ELSE instruction
    (64) conditional -> IF ( . condition ) { instruction_set } ELSE instruction
    (65) conditional -> IF ( . condition ) instruction ELSE { instruction_set }
    (66) conditional -> IF ( . condition ) { instruction_set } ELSE { instruction_set }
    (57) condition -> . operand relation operand
    (58) condition -> . operation relation operand
    (59) condition -> . operand relation operation
    (60) condition -> . operation relation operation
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    condition                      shift and go to state 75
    operand                        shift and go to state 76
    operation                      shift and go to state 77
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 40

    (67) loopconditional -> WHILE ( . condition ) instruction
    (68) loopconditional -> WHILE ( . condition ) { instruction_set }
    (57) condition -> . operand relation operand
    (58) condition -> . operation relation operand
    (59) condition -> . operand relation operation
    (60) condition -> . operation relation operation
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    condition                      shift and go to state 78
    operand                        shift and go to state 76
    operation                      shift and go to state 77
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 41

    (69) loopconditional -> FOR identifier . = range instruction
    (70) loopconditional -> FOR identifier . = range { instruction_set }
    (84) address -> identifier . [ integer_series ]

    =               shift and go to state 79
    [               shift and go to state 45


state 42

    (9) identifier -> address .

    =               reduce using rule 9 (identifier -> address .)
    [               reduce using rule 9 (identifier -> address .)


state 43

    (12) assignment -> identifier = . operand
    (13) assignment -> identifier = . operation
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    identifier                     shift and go to state 63
    operand                        shift and go to state 80
    operation                      shift and go to state 81
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 44

    (14) assignment -> identifier assignoperation . operand
    (15) assignment -> identifier assignoperation . operation
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    identifier                     shift and go to state 63
    operand                        shift and go to state 82
    operation                      shift and go to state 83
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 45

    (84) address -> identifier [ . integer_series ]
    (80) integer_series -> . number
    (81) integer_series -> . number , integer_series
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM

    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31

    integer_series                 shift and go to state 84
    number                         shift and go to state 85

state 46

    (22) assignoperation -> ADDASSIGN .

    -               reduce using rule 22 (assignoperation -> ADDASSIGN .)
    ID              reduce using rule 22 (assignoperation -> ADDASSIGN .)
    INTNUM          reduce using rule 22 (assignoperation -> ADDASSIGN .)
    FLOATNUM        reduce using rule 22 (assignoperation -> ADDASSIGN .)
    STRING          reduce using rule 22 (assignoperation -> ADDASSIGN .)
    ZEROS           reduce using rule 22 (assignoperation -> ADDASSIGN .)
    ONES            reduce using rule 22 (assignoperation -> ADDASSIGN .)
    EYE             reduce using rule 22 (assignoperation -> ADDASSIGN .)
    RETURN          reduce using rule 22 (assignoperation -> ADDASSIGN .)
    PRINT           reduce using rule 22 (assignoperation -> ADDASSIGN .)
    BREAK           reduce using rule 22 (assignoperation -> ADDASSIGN .)
    CONTINUE        reduce using rule 22 (assignoperation -> ADDASSIGN .)
    [               reduce using rule 22 (assignoperation -> ADDASSIGN .)


state 47

    (23) assignoperation -> SUBASSIGN .

    -               reduce using rule 23 (assignoperation -> SUBASSIGN .)
    ID              reduce using rule 23 (assignoperation -> SUBASSIGN .)
    INTNUM          reduce using rule 23 (assignoperation -> SUBASSIGN .)
    FLOATNUM        reduce using rule 23 (assignoperation -> SUBASSIGN .)
    STRING          reduce using rule 23 (assignoperation -> SUBASSIGN .)
    ZEROS           reduce using rule 23 (assignoperation -> SUBASSIGN .)
    ONES            reduce using rule 23 (assignoperation -> SUBASSIGN .)
    EYE             reduce using rule 23 (assignoperation -> SUBASSIGN .)
    RETURN          reduce using rule 23 (assignoperation -> SUBASSIGN .)
    PRINT           reduce using rule 23 (assignoperation -> SUBASSIGN .)
    BREAK           reduce using rule 23 (assignoperation -> SUBASSIGN .)
    CONTINUE        reduce using rule 23 (assignoperation -> SUBASSIGN .)
    [               reduce using rule 23 (assignoperation -> SUBASSIGN .)


state 48

    (24) assignoperation -> MULASSIGN .

    -               reduce using rule 24 (assignoperation -> MULASSIGN .)
    ID              reduce using rule 24 (assignoperation -> MULASSIGN .)
    INTNUM          reduce using rule 24 (assignoperation -> MULASSIGN .)
    FLOATNUM        reduce using rule 24 (assignoperation -> MULASSIGN .)
    STRING          reduce using rule 24 (assignoperation -> MULASSIGN .)
    ZEROS           reduce using rule 24 (assignoperation -> MULASSIGN .)
    ONES            reduce using rule 24 (assignoperation -> MULASSIGN .)
    EYE             reduce using rule 24 (assignoperation -> MULASSIGN .)
    RETURN          reduce using rule 24 (assignoperation -> MULASSIGN .)
    PRINT           reduce using rule 24 (assignoperation -> MULASSIGN .)
    BREAK           reduce using rule 24 (assignoperation -> MULASSIGN .)
    CONTINUE        reduce using rule 24 (assignoperation -> MULASSIGN .)
    [               reduce using rule 24 (assignoperation -> MULASSIGN .)


state 49

    (25) assignoperation -> DIVASSIGN .

    -               reduce using rule 25 (assignoperation -> DIVASSIGN .)
    ID              reduce using rule 25 (assignoperation -> DIVASSIGN .)
    INTNUM          reduce using rule 25 (assignoperation -> DIVASSIGN .)
    FLOATNUM        reduce using rule 25 (assignoperation -> DIVASSIGN .)
    STRING          reduce using rule 25 (assignoperation -> DIVASSIGN .)
    ZEROS           reduce using rule 25 (assignoperation -> DIVASSIGN .)
    ONES            reduce using rule 25 (assignoperation -> DIVASSIGN .)
    EYE             reduce using rule 25 (assignoperation -> DIVASSIGN .)
    RETURN          reduce using rule 25 (assignoperation -> DIVASSIGN .)
    PRINT           reduce using rule 25 (assignoperation -> DIVASSIGN .)
    BREAK           reduce using rule 25 (assignoperation -> DIVASSIGN .)
    CONTINUE        reduce using rule 25 (assignoperation -> DIVASSIGN .)
    [               reduce using rule 25 (assignoperation -> DIVASSIGN .)


state 50

    (16) operation -> operand operator . operand
    (17) operation -> operand operator . operation
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    operand                        shift and go to state 86
    operation                      shift and go to state 87
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 51

    (21) operation -> operand selfoperator .

    ;               reduce using rule 21 (operation -> operand selfoperator .)
    EQ              reduce using rule 21 (operation -> operand selfoperator .)
    NOTEQ           reduce using rule 21 (operation -> operand selfoperator .)
    LESS            reduce using rule 21 (operation -> operand selfoperator .)
    LESSEQ          reduce using rule 21 (operation -> operand selfoperator .)
    MORE            reduce using rule 21 (operation -> operand selfoperator .)
    MOREEQ          reduce using rule 21 (operation -> operand selfoperator .)
    )               reduce using rule 21 (operation -> operand selfoperator .)


state 52

    (31) operator -> + .

    -               reduce using rule 31 (operator -> + .)
    ID              reduce using rule 31 (operator -> + .)
    INTNUM          reduce using rule 31 (operator -> + .)
    FLOATNUM        reduce using rule 31 (operator -> + .)
    STRING          reduce using rule 31 (operator -> + .)
    ZEROS           reduce using rule 31 (operator -> + .)
    ONES            reduce using rule 31 (operator -> + .)
    EYE             reduce using rule 31 (operator -> + .)
    RETURN          reduce using rule 31 (operator -> + .)
    PRINT           reduce using rule 31 (operator -> + .)
    BREAK           reduce using rule 31 (operator -> + .)
    CONTINUE        reduce using rule 31 (operator -> + .)
    [               reduce using rule 31 (operator -> + .)


state 53

    (32) operator -> - .

    -               reduce using rule 32 (operator -> - .)
    ID              reduce using rule 32 (operator -> - .)
    INTNUM          reduce using rule 32 (operator -> - .)
    FLOATNUM        reduce using rule 32 (operator -> - .)
    STRING          reduce using rule 32 (operator -> - .)
    ZEROS           reduce using rule 32 (operator -> - .)
    ONES            reduce using rule 32 (operator -> - .)
    EYE             reduce using rule 32 (operator -> - .)
    RETURN          reduce using rule 32 (operator -> - .)
    PRINT           reduce using rule 32 (operator -> - .)
    BREAK           reduce using rule 32 (operator -> - .)
    CONTINUE        reduce using rule 32 (operator -> - .)
    [               reduce using rule 32 (operator -> - .)


state 54

    (33) operator -> * .

    -               reduce using rule 33 (operator -> * .)
    ID              reduce using rule 33 (operator -> * .)
    INTNUM          reduce using rule 33 (operator -> * .)
    FLOATNUM        reduce using rule 33 (operator -> * .)
    STRING          reduce using rule 33 (operator -> * .)
    ZEROS           reduce using rule 33 (operator -> * .)
    ONES            reduce using rule 33 (operator -> * .)
    EYE             reduce using rule 33 (operator -> * .)
    RETURN          reduce using rule 33 (operator -> * .)
    PRINT           reduce using rule 33 (operator -> * .)
    BREAK           reduce using rule 33 (operator -> * .)
    CONTINUE        reduce using rule 33 (operator -> * .)
    [               reduce using rule 33 (operator -> * .)


state 55

    (34) operator -> / .

    -               reduce using rule 34 (operator -> / .)
    ID              reduce using rule 34 (operator -> / .)
    INTNUM          reduce using rule 34 (operator -> / .)
    FLOATNUM        reduce using rule 34 (operator -> / .)
    STRING          reduce using rule 34 (operator -> / .)
    ZEROS           reduce using rule 34 (operator -> / .)
    ONES            reduce using rule 34 (operator -> / .)
    EYE             reduce using rule 34 (operator -> / .)
    RETURN          reduce using rule 34 (operator -> / .)
    PRINT           reduce using rule 34 (operator -> / .)
    BREAK           reduce using rule 34 (operator -> / .)
    CONTINUE        reduce using rule 34 (operator -> / .)
    [               reduce using rule 34 (operator -> / .)


state 56

    (35) operator -> DOTADD .

    -               reduce using rule 35 (operator -> DOTADD .)
    ID              reduce using rule 35 (operator -> DOTADD .)
    INTNUM          reduce using rule 35 (operator -> DOTADD .)
    FLOATNUM        reduce using rule 35 (operator -> DOTADD .)
    STRING          reduce using rule 35 (operator -> DOTADD .)
    ZEROS           reduce using rule 35 (operator -> DOTADD .)
    ONES            reduce using rule 35 (operator -> DOTADD .)
    EYE             reduce using rule 35 (operator -> DOTADD .)
    RETURN          reduce using rule 35 (operator -> DOTADD .)
    PRINT           reduce using rule 35 (operator -> DOTADD .)
    BREAK           reduce using rule 35 (operator -> DOTADD .)
    CONTINUE        reduce using rule 35 (operator -> DOTADD .)
    [               reduce using rule 35 (operator -> DOTADD .)


state 57

    (36) operator -> DOTSUB .

    -               reduce using rule 36 (operator -> DOTSUB .)
    ID              reduce using rule 36 (operator -> DOTSUB .)
    INTNUM          reduce using rule 36 (operator -> DOTSUB .)
    FLOATNUM        reduce using rule 36 (operator -> DOTSUB .)
    STRING          reduce using rule 36 (operator -> DOTSUB .)
    ZEROS           reduce using rule 36 (operator -> DOTSUB .)
    ONES            reduce using rule 36 (operator -> DOTSUB .)
    EYE             reduce using rule 36 (operator -> DOTSUB .)
    RETURN          reduce using rule 36 (operator -> DOTSUB .)
    PRINT           reduce using rule 36 (operator -> DOTSUB .)
    BREAK           reduce using rule 36 (operator -> DOTSUB .)
    CONTINUE        reduce using rule 36 (operator -> DOTSUB .)
    [               reduce using rule 36 (operator -> DOTSUB .)


state 58

    (37) operator -> DOTMUL .

    -               reduce using rule 37 (operator -> DOTMUL .)
    ID              reduce using rule 37 (operator -> DOTMUL .)
    INTNUM          reduce using rule 37 (operator -> DOTMUL .)
    FLOATNUM        reduce using rule 37 (operator -> DOTMUL .)
    STRING          reduce using rule 37 (operator -> DOTMUL .)
    ZEROS           reduce using rule 37 (operator -> DOTMUL .)
    ONES            reduce using rule 37 (operator -> DOTMUL .)
    EYE             reduce using rule 37 (operator -> DOTMUL .)
    RETURN          reduce using rule 37 (operator -> DOTMUL .)
    PRINT           reduce using rule 37 (operator -> DOTMUL .)
    BREAK           reduce using rule 37 (operator -> DOTMUL .)
    CONTINUE        reduce using rule 37 (operator -> DOTMUL .)
    [               reduce using rule 37 (operator -> DOTMUL .)


state 59

    (38) operator -> DOTDIV .

    -               reduce using rule 38 (operator -> DOTDIV .)
    ID              reduce using rule 38 (operator -> DOTDIV .)
    INTNUM          reduce using rule 38 (operator -> DOTDIV .)
    FLOATNUM        reduce using rule 38 (operator -> DOTDIV .)
    STRING          reduce using rule 38 (operator -> DOTDIV .)
    ZEROS           reduce using rule 38 (operator -> DOTDIV .)
    ONES            reduce using rule 38 (operator -> DOTDIV .)
    EYE             reduce using rule 38 (operator -> DOTDIV .)
    RETURN          reduce using rule 38 (operator -> DOTDIV .)
    PRINT           reduce using rule 38 (operator -> DOTDIV .)
    BREAK           reduce using rule 38 (operator -> DOTDIV .)
    CONTINUE        reduce using rule 38 (operator -> DOTDIV .)
    [               reduce using rule 38 (operator -> DOTDIV .)


state 60

    (39) selfoperator -> ' .

    ;               reduce using rule 39 (selfoperator -> ' .)
    EQ              reduce using rule 39 (selfoperator -> ' .)
    NOTEQ           reduce using rule 39 (selfoperator -> ' .)
    LESS            reduce using rule 39 (selfoperator -> ' .)
    LESSEQ          reduce using rule 39 (selfoperator -> ' .)
    MORE            reduce using rule 39 (selfoperator -> ' .)
    MOREEQ          reduce using rule 39 (selfoperator -> ' .)
    )               reduce using rule 39 (selfoperator -> ' .)


state 61

    (18) operation -> function ( . operand )
    (19) operation -> function ( . operation )
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    function                       shift and go to state 15
    operand                        shift and go to state 88
    operation                      shift and go to state 89
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 62

    (29) operand -> - operand .

    +               reduce using rule 29 (operand -> - operand .)
    -               reduce using rule 29 (operand -> - operand .)
    *               reduce using rule 29 (operand -> - operand .)
    /               reduce using rule 29 (operand -> - operand .)
    DOTADD          reduce using rule 29 (operand -> - operand .)
    DOTSUB          reduce using rule 29 (operand -> - operand .)
    DOTMUL          reduce using rule 29 (operand -> - operand .)
    DOTDIV          reduce using rule 29 (operand -> - operand .)
    '               reduce using rule 29 (operand -> - operand .)
    ;               reduce using rule 29 (operand -> - operand .)
    EQ              reduce using rule 29 (operand -> - operand .)
    NOTEQ           reduce using rule 29 (operand -> - operand .)
    LESS            reduce using rule 29 (operand -> - operand .)
    LESSEQ          reduce using rule 29 (operand -> - operand .)
    MORE            reduce using rule 29 (operand -> - operand .)
    MOREEQ          reduce using rule 29 (operand -> - operand .)
    )               reduce using rule 29 (operand -> - operand .)
    ,               reduce using rule 29 (operand -> - operand .)
    ]               reduce using rule 29 (operand -> - operand .)
    :               reduce using rule 29 (operand -> - operand .)
    {               reduce using rule 29 (operand -> - operand .)
    IF              reduce using rule 29 (operand -> - operand .)
    WHILE           reduce using rule 29 (operand -> - operand .)
    FOR             reduce using rule 29 (operand -> - operand .)
    ID              reduce using rule 29 (operand -> - operand .)
    ZEROS           reduce using rule 29 (operand -> - operand .)
    ONES            reduce using rule 29 (operand -> - operand .)
    EYE             reduce using rule 29 (operand -> - operand .)
    RETURN          reduce using rule 29 (operand -> - operand .)
    PRINT           reduce using rule 29 (operand -> - operand .)
    BREAK           reduce using rule 29 (operand -> - operand .)
    CONTINUE        reduce using rule 29 (operand -> - operand .)
    INTNUM          reduce using rule 29 (operand -> - operand .)
    FLOATNUM        reduce using rule 29 (operand -> - operand .)
    STRING          reduce using rule 29 (operand -> - operand .)
    [               reduce using rule 29 (operand -> - operand .)


state 63

    (26) operand -> identifier .
    (84) address -> identifier . [ integer_series ]

  ! shift/reduce conflict for [ resolved as shift
    +               reduce using rule 26 (operand -> identifier .)
    -               reduce using rule 26 (operand -> identifier .)
    *               reduce using rule 26 (operand -> identifier .)
    /               reduce using rule 26 (operand -> identifier .)
    DOTADD          reduce using rule 26 (operand -> identifier .)
    DOTSUB          reduce using rule 26 (operand -> identifier .)
    DOTMUL          reduce using rule 26 (operand -> identifier .)
    DOTDIV          reduce using rule 26 (operand -> identifier .)
    '               reduce using rule 26 (operand -> identifier .)
    ;               reduce using rule 26 (operand -> identifier .)
    EQ              reduce using rule 26 (operand -> identifier .)
    NOTEQ           reduce using rule 26 (operand -> identifier .)
    LESS            reduce using rule 26 (operand -> identifier .)
    LESSEQ          reduce using rule 26 (operand -> identifier .)
    MORE            reduce using rule 26 (operand -> identifier .)
    MOREEQ          reduce using rule 26 (operand -> identifier .)
    )               reduce using rule 26 (operand -> identifier .)
    ,               reduce using rule 26 (operand -> identifier .)
    ]               reduce using rule 26 (operand -> identifier .)
    :               reduce using rule 26 (operand -> identifier .)
    {               reduce using rule 26 (operand -> identifier .)
    IF              reduce using rule 26 (operand -> identifier .)
    WHILE           reduce using rule 26 (operand -> identifier .)
    FOR             reduce using rule 26 (operand -> identifier .)
    ID              reduce using rule 26 (operand -> identifier .)
    ZEROS           reduce using rule 26 (operand -> identifier .)
    ONES            reduce using rule 26 (operand -> identifier .)
    EYE             reduce using rule 26 (operand -> identifier .)
    RETURN          reduce using rule 26 (operand -> identifier .)
    PRINT           reduce using rule 26 (operand -> identifier .)
    BREAK           reduce using rule 26 (operand -> identifier .)
    CONTINUE        reduce using rule 26 (operand -> identifier .)
    INTNUM          reduce using rule 26 (operand -> identifier .)
    FLOATNUM        reduce using rule 26 (operand -> identifier .)
    STRING          reduce using rule 26 (operand -> identifier .)
    [               shift and go to state 45

  ! [               [ reduce using rule 26 (operand -> identifier .) ]


state 64

    (30) operand -> address .
    (9) identifier -> address .

  ! reduce/reduce conflict for [ resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for + resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for - resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for * resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for / resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTADD resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTSUB resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTMUL resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for DOTDIV resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ' resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ; resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for EQ resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for LESS resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for MORE resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for MOREEQ resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ) resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for , resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ] resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for : resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for { resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for IF resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ID resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ZEROS resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for ONES resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for EYE resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for RETURN resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for PRINT resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for BREAK resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for INTNUM resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for FLOATNUM resolved using rule 9 (identifier -> address .)
  ! reduce/reduce conflict for STRING resolved using rule 9 (identifier -> address .)
    [               reduce using rule 9 (identifier -> address .)
    +               reduce using rule 9 (identifier -> address .)
    -               reduce using rule 9 (identifier -> address .)
    *               reduce using rule 9 (identifier -> address .)
    /               reduce using rule 9 (identifier -> address .)
    DOTADD          reduce using rule 9 (identifier -> address .)
    DOTSUB          reduce using rule 9 (identifier -> address .)
    DOTMUL          reduce using rule 9 (identifier -> address .)
    DOTDIV          reduce using rule 9 (identifier -> address .)
    '               reduce using rule 9 (identifier -> address .)
    ;               reduce using rule 9 (identifier -> address .)
    EQ              reduce using rule 9 (identifier -> address .)
    NOTEQ           reduce using rule 9 (identifier -> address .)
    LESS            reduce using rule 9 (identifier -> address .)
    LESSEQ          reduce using rule 9 (identifier -> address .)
    MORE            reduce using rule 9 (identifier -> address .)
    MOREEQ          reduce using rule 9 (identifier -> address .)
    )               reduce using rule 9 (identifier -> address .)
    ,               reduce using rule 9 (identifier -> address .)
    ]               reduce using rule 9 (identifier -> address .)
    :               reduce using rule 9 (identifier -> address .)
    {               reduce using rule 9 (identifier -> address .)
    IF              reduce using rule 9 (identifier -> address .)
    WHILE           reduce using rule 9 (identifier -> address .)
    FOR             reduce using rule 9 (identifier -> address .)
    ID              reduce using rule 9 (identifier -> address .)
    ZEROS           reduce using rule 9 (identifier -> address .)
    ONES            reduce using rule 9 (identifier -> address .)
    EYE             reduce using rule 9 (identifier -> address .)
    RETURN          reduce using rule 9 (identifier -> address .)
    PRINT           reduce using rule 9 (identifier -> address .)
    BREAK           reduce using rule 9 (identifier -> address .)
    CONTINUE        reduce using rule 9 (identifier -> address .)
    INTNUM          reduce using rule 9 (identifier -> address .)
    FLOATNUM        reduce using rule 9 (identifier -> address .)
    STRING          reduce using rule 9 (identifier -> address .)

  ! +               [ reduce using rule 30 (operand -> address .) ]
  ! -               [ reduce using rule 30 (operand -> address .) ]
  ! *               [ reduce using rule 30 (operand -> address .) ]
  ! /               [ reduce using rule 30 (operand -> address .) ]
  ! DOTADD          [ reduce using rule 30 (operand -> address .) ]
  ! DOTSUB          [ reduce using rule 30 (operand -> address .) ]
  ! DOTMUL          [ reduce using rule 30 (operand -> address .) ]
  ! DOTDIV          [ reduce using rule 30 (operand -> address .) ]
  ! '               [ reduce using rule 30 (operand -> address .) ]
  ! ;               [ reduce using rule 30 (operand -> address .) ]
  ! EQ              [ reduce using rule 30 (operand -> address .) ]
  ! NOTEQ           [ reduce using rule 30 (operand -> address .) ]
  ! LESS            [ reduce using rule 30 (operand -> address .) ]
  ! LESSEQ          [ reduce using rule 30 (operand -> address .) ]
  ! MORE            [ reduce using rule 30 (operand -> address .) ]
  ! MOREEQ          [ reduce using rule 30 (operand -> address .) ]
  ! )               [ reduce using rule 30 (operand -> address .) ]
  ! ,               [ reduce using rule 30 (operand -> address .) ]
  ! ]               [ reduce using rule 30 (operand -> address .) ]
  ! :               [ reduce using rule 30 (operand -> address .) ]
  ! {               [ reduce using rule 30 (operand -> address .) ]
  ! IF              [ reduce using rule 30 (operand -> address .) ]
  ! WHILE           [ reduce using rule 30 (operand -> address .) ]
  ! FOR             [ reduce using rule 30 (operand -> address .) ]
  ! ID              [ reduce using rule 30 (operand -> address .) ]
  ! ZEROS           [ reduce using rule 30 (operand -> address .) ]
  ! ONES            [ reduce using rule 30 (operand -> address .) ]
  ! EYE             [ reduce using rule 30 (operand -> address .) ]
  ! RETURN          [ reduce using rule 30 (operand -> address .) ]
  ! PRINT           [ reduce using rule 30 (operand -> address .) ]
  ! BREAK           [ reduce using rule 30 (operand -> address .) ]
  ! CONTINUE        [ reduce using rule 30 (operand -> address .) ]
  ! INTNUM          [ reduce using rule 30 (operand -> address .) ]
  ! FLOATNUM        [ reduce using rule 30 (operand -> address .) ]
  ! STRING          [ reduce using rule 30 (operand -> address .) ]
  ! [               [ reduce using rule 30 (operand -> address .) ]


state 65

    (43) reservedoperation -> RETURN operation .

    ;               reduce using rule 43 (reservedoperation -> RETURN operation .)
    EQ              reduce using rule 43 (reservedoperation -> RETURN operation .)
    NOTEQ           reduce using rule 43 (reservedoperation -> RETURN operation .)
    LESS            reduce using rule 43 (reservedoperation -> RETURN operation .)
    LESSEQ          reduce using rule 43 (reservedoperation -> RETURN operation .)
    MORE            reduce using rule 43 (reservedoperation -> RETURN operation .)
    MOREEQ          reduce using rule 43 (reservedoperation -> RETURN operation .)
    )               reduce using rule 43 (reservedoperation -> RETURN operation .)


state 66

    (44) reservedoperation -> RETURN operand .
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    ;               reduce using rule 44 (reservedoperation -> RETURN operand .)
    EQ              reduce using rule 44 (reservedoperation -> RETURN operand .)
    NOTEQ           reduce using rule 44 (reservedoperation -> RETURN operand .)
    LESS            reduce using rule 44 (reservedoperation -> RETURN operand .)
    LESSEQ          reduce using rule 44 (reservedoperation -> RETURN operand .)
    MORE            reduce using rule 44 (reservedoperation -> RETURN operand .)
    MOREEQ          reduce using rule 44 (reservedoperation -> RETURN operand .)
    )               reduce using rule 44 (reservedoperation -> RETURN operand .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 67

    (46) reservedoperation -> PRINT series .

    ;               reduce using rule 46 (reservedoperation -> PRINT series .)
    EQ              reduce using rule 46 (reservedoperation -> PRINT series .)
    NOTEQ           reduce using rule 46 (reservedoperation -> PRINT series .)
    LESS            reduce using rule 46 (reservedoperation -> PRINT series .)
    LESSEQ          reduce using rule 46 (reservedoperation -> PRINT series .)
    MORE            reduce using rule 46 (reservedoperation -> PRINT series .)
    MOREEQ          reduce using rule 46 (reservedoperation -> PRINT series .)
    )               reduce using rule 46 (reservedoperation -> PRINT series .)


state 68

    (47) reservedoperation -> PRINT operation .

    ;               reduce using rule 47 (reservedoperation -> PRINT operation .)
    EQ              reduce using rule 47 (reservedoperation -> PRINT operation .)
    NOTEQ           reduce using rule 47 (reservedoperation -> PRINT operation .)
    LESS            reduce using rule 47 (reservedoperation -> PRINT operation .)
    LESSEQ          reduce using rule 47 (reservedoperation -> PRINT operation .)
    MORE            reduce using rule 47 (reservedoperation -> PRINT operation .)
    MOREEQ          reduce using rule 47 (reservedoperation -> PRINT operation .)
    )               reduce using rule 47 (reservedoperation -> PRINT operation .)


state 69

    (48) reservedoperation -> PRINT operand .
    (78) series -> operand .
    (79) series -> operand . , series
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

  ! reduce/reduce conflict for ; resolved using rule 48 (reservedoperation -> PRINT operand .)
  ! reduce/reduce conflict for EQ resolved using rule 48 (reservedoperation -> PRINT operand .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 48 (reservedoperation -> PRINT operand .)
  ! reduce/reduce conflict for LESS resolved using rule 48 (reservedoperation -> PRINT operand .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 48 (reservedoperation -> PRINT operand .)
  ! reduce/reduce conflict for MORE resolved using rule 48 (reservedoperation -> PRINT operand .)
  ! reduce/reduce conflict for MOREEQ resolved using rule 48 (reservedoperation -> PRINT operand .)
  ! reduce/reduce conflict for ) resolved using rule 48 (reservedoperation -> PRINT operand .)
    ;               reduce using rule 48 (reservedoperation -> PRINT operand .)
    EQ              reduce using rule 48 (reservedoperation -> PRINT operand .)
    NOTEQ           reduce using rule 48 (reservedoperation -> PRINT operand .)
    LESS            reduce using rule 48 (reservedoperation -> PRINT operand .)
    LESSEQ          reduce using rule 48 (reservedoperation -> PRINT operand .)
    MORE            reduce using rule 48 (reservedoperation -> PRINT operand .)
    MOREEQ          reduce using rule 48 (reservedoperation -> PRINT operand .)
    )               reduce using rule 48 (reservedoperation -> PRINT operand .)
    ,               shift and go to state 90
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! ;               [ reduce using rule 78 (series -> operand .) ]
  ! EQ              [ reduce using rule 78 (series -> operand .) ]
  ! NOTEQ           [ reduce using rule 78 (series -> operand .) ]
  ! LESS            [ reduce using rule 78 (series -> operand .) ]
  ! LESSEQ          [ reduce using rule 78 (series -> operand .) ]
  ! MORE            [ reduce using rule 78 (series -> operand .) ]
  ! MOREEQ          [ reduce using rule 78 (series -> operand .) ]
  ! )               [ reduce using rule 78 (series -> operand .) ]

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 70

    (76) rows -> [ . series ]
    (77) rows -> [ . series ] , rows
    (75) matrix -> [ . rows ]
    (78) series -> . operand
    (79) series -> . operand , series
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]

    [               shift and go to state 70
    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33

    series                         shift and go to state 72
    rows                           shift and go to state 71
    operand                        shift and go to state 73
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32

state 71

    (75) matrix -> [ rows . ]
    (74) matrix -> rows .

  ! shift/reduce conflict for ] resolved as shift
    ]               shift and go to state 91
    ,               reduce using rule 74 (matrix -> rows .)

  ! ]               [ reduce using rule 74 (matrix -> rows .) ]


state 72

    (76) rows -> [ series . ]
    (77) rows -> [ series . ] , rows

    ]               shift and go to state 92


state 73

    (78) series -> operand .
    (79) series -> operand . , series

    ]               reduce using rule 78 (series -> operand .)
    ;               reduce using rule 78 (series -> operand .)
    EQ              reduce using rule 78 (series -> operand .)
    NOTEQ           reduce using rule 78 (series -> operand .)
    LESS            reduce using rule 78 (series -> operand .)
    LESSEQ          reduce using rule 78 (series -> operand .)
    MORE            reduce using rule 78 (series -> operand .)
    MOREEQ          reduce using rule 78 (series -> operand .)
    )               reduce using rule 78 (series -> operand .)
    ,               shift and go to state 90


state 74

    (6) instruction_set -> { instruction_set } .

    $end            reduce using rule 6 (instruction_set -> { instruction_set } .)
    }               reduce using rule 6 (instruction_set -> { instruction_set } .)


state 75

    (61) conditional -> IF ( condition . ) instruction
    (62) conditional -> IF ( condition . ) { instruction_set }
    (63) conditional -> IF ( condition . ) instruction ELSE instruction
    (64) conditional -> IF ( condition . ) { instruction_set } ELSE instruction
    (65) conditional -> IF ( condition . ) instruction ELSE { instruction_set }
    (66) conditional -> IF ( condition . ) { instruction_set } ELSE { instruction_set }

    )               shift and go to state 93


state 76

    (57) condition -> operand . relation operand
    (59) condition -> operand . relation operation
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (51) relation -> . EQ
    (52) relation -> . NOTEQ
    (53) relation -> . LESS
    (54) relation -> . LESSEQ
    (55) relation -> . MORE
    (56) relation -> . MOREEQ
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    EQ              shift and go to state 95
    NOTEQ           shift and go to state 96
    LESS            shift and go to state 97
    LESSEQ          shift and go to state 98
    MORE            shift and go to state 99
    MOREEQ          shift and go to state 100
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    relation                       shift and go to state 94
    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 77

    (58) condition -> operation . relation operand
    (60) condition -> operation . relation operation
    (51) relation -> . EQ
    (52) relation -> . NOTEQ
    (53) relation -> . LESS
    (54) relation -> . LESSEQ
    (55) relation -> . MORE
    (56) relation -> . MOREEQ

    EQ              shift and go to state 95
    NOTEQ           shift and go to state 96
    LESS            shift and go to state 97
    LESSEQ          shift and go to state 98
    MORE            shift and go to state 99
    MOREEQ          shift and go to state 100

    relation                       shift and go to state 101

state 78

    (67) loopconditional -> WHILE ( condition . ) instruction
    (68) loopconditional -> WHILE ( condition . ) { instruction_set }

    )               shift and go to state 102


state 79

    (69) loopconditional -> FOR identifier = . range instruction
    (70) loopconditional -> FOR identifier = . range { instruction_set }
    (71) range -> . operand : operand
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    identifier                     shift and go to state 63
    range                          shift and go to state 103
    operand                        shift and go to state 104
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 80

    (12) assignment -> identifier = operand .
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    ;               reduce using rule 12 (assignment -> identifier = operand .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 81

    (13) assignment -> identifier = operation .

    ;               reduce using rule 13 (assignment -> identifier = operation .)


state 82

    (14) assignment -> identifier assignoperation operand .
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    ;               reduce using rule 14 (assignment -> identifier assignoperation operand .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 83

    (15) assignment -> identifier assignoperation operation .

    ;               reduce using rule 15 (assignment -> identifier assignoperation operation .)


state 84

    (84) address -> identifier [ integer_series . ]

    ]               shift and go to state 105


state 85

    (80) integer_series -> number .
    (81) integer_series -> number . , integer_series

    ]               reduce using rule 80 (integer_series -> number .)
    ,               shift and go to state 106


state 86

    (16) operation -> operand operator operand .
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    ;               reduce using rule 16 (operation -> operand operator operand .)
    EQ              reduce using rule 16 (operation -> operand operator operand .)
    NOTEQ           reduce using rule 16 (operation -> operand operator operand .)
    LESS            reduce using rule 16 (operation -> operand operator operand .)
    LESSEQ          reduce using rule 16 (operation -> operand operator operand .)
    MORE            reduce using rule 16 (operation -> operand operator operand .)
    MOREEQ          reduce using rule 16 (operation -> operand operator operand .)
    )               reduce using rule 16 (operation -> operand operator operand .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 87

    (17) operation -> operand operator operation .

    ;               reduce using rule 17 (operation -> operand operator operation .)
    EQ              reduce using rule 17 (operation -> operand operator operation .)
    NOTEQ           reduce using rule 17 (operation -> operand operator operation .)
    LESS            reduce using rule 17 (operation -> operand operator operation .)
    LESSEQ          reduce using rule 17 (operation -> operand operator operation .)
    MORE            reduce using rule 17 (operation -> operand operator operation .)
    MOREEQ          reduce using rule 17 (operation -> operand operator operation .)
    )               reduce using rule 17 (operation -> operand operator operation .)


state 88

    (18) operation -> function ( operand . )
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    )               shift and go to state 107
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 89

    (19) operation -> function ( operation . )

    )               shift and go to state 108


state 90

    (79) series -> operand , . series
    (78) series -> . operand
    (79) series -> . operand , series
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    operand                        shift and go to state 73
    series                         shift and go to state 109
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 91

    (75) matrix -> [ rows ] .

    +               reduce using rule 75 (matrix -> [ rows ] .)
    -               reduce using rule 75 (matrix -> [ rows ] .)
    *               reduce using rule 75 (matrix -> [ rows ] .)
    /               reduce using rule 75 (matrix -> [ rows ] .)
    DOTADD          reduce using rule 75 (matrix -> [ rows ] .)
    DOTSUB          reduce using rule 75 (matrix -> [ rows ] .)
    DOTMUL          reduce using rule 75 (matrix -> [ rows ] .)
    DOTDIV          reduce using rule 75 (matrix -> [ rows ] .)
    '               reduce using rule 75 (matrix -> [ rows ] .)
    ;               reduce using rule 75 (matrix -> [ rows ] .)
    EQ              reduce using rule 75 (matrix -> [ rows ] .)
    NOTEQ           reduce using rule 75 (matrix -> [ rows ] .)
    LESS            reduce using rule 75 (matrix -> [ rows ] .)
    LESSEQ          reduce using rule 75 (matrix -> [ rows ] .)
    MORE            reduce using rule 75 (matrix -> [ rows ] .)
    MOREEQ          reduce using rule 75 (matrix -> [ rows ] .)
    )               reduce using rule 75 (matrix -> [ rows ] .)
    ,               reduce using rule 75 (matrix -> [ rows ] .)
    ]               reduce using rule 75 (matrix -> [ rows ] .)
    :               reduce using rule 75 (matrix -> [ rows ] .)
    {               reduce using rule 75 (matrix -> [ rows ] .)
    IF              reduce using rule 75 (matrix -> [ rows ] .)
    WHILE           reduce using rule 75 (matrix -> [ rows ] .)
    FOR             reduce using rule 75 (matrix -> [ rows ] .)
    ID              reduce using rule 75 (matrix -> [ rows ] .)
    ZEROS           reduce using rule 75 (matrix -> [ rows ] .)
    ONES            reduce using rule 75 (matrix -> [ rows ] .)
    EYE             reduce using rule 75 (matrix -> [ rows ] .)
    RETURN          reduce using rule 75 (matrix -> [ rows ] .)
    PRINT           reduce using rule 75 (matrix -> [ rows ] .)
    BREAK           reduce using rule 75 (matrix -> [ rows ] .)
    CONTINUE        reduce using rule 75 (matrix -> [ rows ] .)
    INTNUM          reduce using rule 75 (matrix -> [ rows ] .)
    FLOATNUM        reduce using rule 75 (matrix -> [ rows ] .)
    STRING          reduce using rule 75 (matrix -> [ rows ] .)
    [               reduce using rule 75 (matrix -> [ rows ] .)


state 92

    (76) rows -> [ series ] .
    (77) rows -> [ series ] . , rows

  ! shift/reduce conflict for , resolved as shift
    +               reduce using rule 76 (rows -> [ series ] .)
    -               reduce using rule 76 (rows -> [ series ] .)
    *               reduce using rule 76 (rows -> [ series ] .)
    /               reduce using rule 76 (rows -> [ series ] .)
    DOTADD          reduce using rule 76 (rows -> [ series ] .)
    DOTSUB          reduce using rule 76 (rows -> [ series ] .)
    DOTMUL          reduce using rule 76 (rows -> [ series ] .)
    DOTDIV          reduce using rule 76 (rows -> [ series ] .)
    '               reduce using rule 76 (rows -> [ series ] .)
    ;               reduce using rule 76 (rows -> [ series ] .)
    EQ              reduce using rule 76 (rows -> [ series ] .)
    NOTEQ           reduce using rule 76 (rows -> [ series ] .)
    LESS            reduce using rule 76 (rows -> [ series ] .)
    LESSEQ          reduce using rule 76 (rows -> [ series ] .)
    MORE            reduce using rule 76 (rows -> [ series ] .)
    MOREEQ          reduce using rule 76 (rows -> [ series ] .)
    )               reduce using rule 76 (rows -> [ series ] .)
    ]               reduce using rule 76 (rows -> [ series ] .)
    :               reduce using rule 76 (rows -> [ series ] .)
    {               reduce using rule 76 (rows -> [ series ] .)
    IF              reduce using rule 76 (rows -> [ series ] .)
    WHILE           reduce using rule 76 (rows -> [ series ] .)
    FOR             reduce using rule 76 (rows -> [ series ] .)
    ID              reduce using rule 76 (rows -> [ series ] .)
    ZEROS           reduce using rule 76 (rows -> [ series ] .)
    ONES            reduce using rule 76 (rows -> [ series ] .)
    EYE             reduce using rule 76 (rows -> [ series ] .)
    RETURN          reduce using rule 76 (rows -> [ series ] .)
    PRINT           reduce using rule 76 (rows -> [ series ] .)
    BREAK           reduce using rule 76 (rows -> [ series ] .)
    CONTINUE        reduce using rule 76 (rows -> [ series ] .)
    INTNUM          reduce using rule 76 (rows -> [ series ] .)
    FLOATNUM        reduce using rule 76 (rows -> [ series ] .)
    STRING          reduce using rule 76 (rows -> [ series ] .)
    [               reduce using rule 76 (rows -> [ series ] .)
    ,               shift and go to state 110

  ! ,               [ reduce using rule 76 (rows -> [ series ] .) ]


state 93

    (61) conditional -> IF ( condition ) . instruction
    (62) conditional -> IF ( condition ) . { instruction_set }
    (63) conditional -> IF ( condition ) . instruction ELSE instruction
    (64) conditional -> IF ( condition ) . { instruction_set } ELSE instruction
    (65) conditional -> IF ( condition ) . instruction ELSE { instruction_set }
    (66) conditional -> IF ( condition ) . { instruction_set } ELSE { instruction_set }
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 112
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction                    shift and go to state 111
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 94

    (57) condition -> operand relation . operand
    (59) condition -> operand relation . operation
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    operand                        shift and go to state 113
    operation                      shift and go to state 114
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 95

    (51) relation -> EQ .

    -               reduce using rule 51 (relation -> EQ .)
    ID              reduce using rule 51 (relation -> EQ .)
    INTNUM          reduce using rule 51 (relation -> EQ .)
    FLOATNUM        reduce using rule 51 (relation -> EQ .)
    STRING          reduce using rule 51 (relation -> EQ .)
    ZEROS           reduce using rule 51 (relation -> EQ .)
    ONES            reduce using rule 51 (relation -> EQ .)
    EYE             reduce using rule 51 (relation -> EQ .)
    RETURN          reduce using rule 51 (relation -> EQ .)
    PRINT           reduce using rule 51 (relation -> EQ .)
    BREAK           reduce using rule 51 (relation -> EQ .)
    CONTINUE        reduce using rule 51 (relation -> EQ .)
    [               reduce using rule 51 (relation -> EQ .)


state 96

    (52) relation -> NOTEQ .

    -               reduce using rule 52 (relation -> NOTEQ .)
    ID              reduce using rule 52 (relation -> NOTEQ .)
    INTNUM          reduce using rule 52 (relation -> NOTEQ .)
    FLOATNUM        reduce using rule 52 (relation -> NOTEQ .)
    STRING          reduce using rule 52 (relation -> NOTEQ .)
    ZEROS           reduce using rule 52 (relation -> NOTEQ .)
    ONES            reduce using rule 52 (relation -> NOTEQ .)
    EYE             reduce using rule 52 (relation -> NOTEQ .)
    RETURN          reduce using rule 52 (relation -> NOTEQ .)
    PRINT           reduce using rule 52 (relation -> NOTEQ .)
    BREAK           reduce using rule 52 (relation -> NOTEQ .)
    CONTINUE        reduce using rule 52 (relation -> NOTEQ .)
    [               reduce using rule 52 (relation -> NOTEQ .)


state 97

    (53) relation -> LESS .

    -               reduce using rule 53 (relation -> LESS .)
    ID              reduce using rule 53 (relation -> LESS .)
    INTNUM          reduce using rule 53 (relation -> LESS .)
    FLOATNUM        reduce using rule 53 (relation -> LESS .)
    STRING          reduce using rule 53 (relation -> LESS .)
    ZEROS           reduce using rule 53 (relation -> LESS .)
    ONES            reduce using rule 53 (relation -> LESS .)
    EYE             reduce using rule 53 (relation -> LESS .)
    RETURN          reduce using rule 53 (relation -> LESS .)
    PRINT           reduce using rule 53 (relation -> LESS .)
    BREAK           reduce using rule 53 (relation -> LESS .)
    CONTINUE        reduce using rule 53 (relation -> LESS .)
    [               reduce using rule 53 (relation -> LESS .)


state 98

    (54) relation -> LESSEQ .

    -               reduce using rule 54 (relation -> LESSEQ .)
    ID              reduce using rule 54 (relation -> LESSEQ .)
    INTNUM          reduce using rule 54 (relation -> LESSEQ .)
    FLOATNUM        reduce using rule 54 (relation -> LESSEQ .)
    STRING          reduce using rule 54 (relation -> LESSEQ .)
    ZEROS           reduce using rule 54 (relation -> LESSEQ .)
    ONES            reduce using rule 54 (relation -> LESSEQ .)
    EYE             reduce using rule 54 (relation -> LESSEQ .)
    RETURN          reduce using rule 54 (relation -> LESSEQ .)
    PRINT           reduce using rule 54 (relation -> LESSEQ .)
    BREAK           reduce using rule 54 (relation -> LESSEQ .)
    CONTINUE        reduce using rule 54 (relation -> LESSEQ .)
    [               reduce using rule 54 (relation -> LESSEQ .)


state 99

    (55) relation -> MORE .

    -               reduce using rule 55 (relation -> MORE .)
    ID              reduce using rule 55 (relation -> MORE .)
    INTNUM          reduce using rule 55 (relation -> MORE .)
    FLOATNUM        reduce using rule 55 (relation -> MORE .)
    STRING          reduce using rule 55 (relation -> MORE .)
    ZEROS           reduce using rule 55 (relation -> MORE .)
    ONES            reduce using rule 55 (relation -> MORE .)
    EYE             reduce using rule 55 (relation -> MORE .)
    RETURN          reduce using rule 55 (relation -> MORE .)
    PRINT           reduce using rule 55 (relation -> MORE .)
    BREAK           reduce using rule 55 (relation -> MORE .)
    CONTINUE        reduce using rule 55 (relation -> MORE .)
    [               reduce using rule 55 (relation -> MORE .)


state 100

    (56) relation -> MOREEQ .

    -               reduce using rule 56 (relation -> MOREEQ .)
    ID              reduce using rule 56 (relation -> MOREEQ .)
    INTNUM          reduce using rule 56 (relation -> MOREEQ .)
    FLOATNUM        reduce using rule 56 (relation -> MOREEQ .)
    STRING          reduce using rule 56 (relation -> MOREEQ .)
    ZEROS           reduce using rule 56 (relation -> MOREEQ .)
    ONES            reduce using rule 56 (relation -> MOREEQ .)
    EYE             reduce using rule 56 (relation -> MOREEQ .)
    RETURN          reduce using rule 56 (relation -> MOREEQ .)
    PRINT           reduce using rule 56 (relation -> MOREEQ .)
    BREAK           reduce using rule 56 (relation -> MOREEQ .)
    CONTINUE        reduce using rule 56 (relation -> MOREEQ .)
    [               reduce using rule 56 (relation -> MOREEQ .)


state 101

    (58) condition -> operation relation . operand
    (60) condition -> operation relation . operation
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    [               shift and go to state 29

    operation                      shift and go to state 115
    operand                        shift and go to state 116
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 102

    (67) loopconditional -> WHILE ( condition ) . instruction
    (68) loopconditional -> WHILE ( condition ) . { instruction_set }
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 118
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction                    shift and go to state 117
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 103

    (69) loopconditional -> FOR identifier = range . instruction
    (70) loopconditional -> FOR identifier = range . { instruction_set }
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 120
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    identifier                     shift and go to state 13
    instruction                    shift and go to state 119
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 104

    (71) range -> operand . : operand

    :               shift and go to state 121


state 105

    (84) address -> identifier [ integer_series ] .

    =               reduce using rule 84 (address -> identifier [ integer_series ] .)
    [               reduce using rule 84 (address -> identifier [ integer_series ] .)
    ADDASSIGN       reduce using rule 84 (address -> identifier [ integer_series ] .)
    SUBASSIGN       reduce using rule 84 (address -> identifier [ integer_series ] .)
    MULASSIGN       reduce using rule 84 (address -> identifier [ integer_series ] .)
    DIVASSIGN       reduce using rule 84 (address -> identifier [ integer_series ] .)
    +               reduce using rule 84 (address -> identifier [ integer_series ] .)
    -               reduce using rule 84 (address -> identifier [ integer_series ] .)
    *               reduce using rule 84 (address -> identifier [ integer_series ] .)
    /               reduce using rule 84 (address -> identifier [ integer_series ] .)
    DOTADD          reduce using rule 84 (address -> identifier [ integer_series ] .)
    DOTSUB          reduce using rule 84 (address -> identifier [ integer_series ] .)
    DOTMUL          reduce using rule 84 (address -> identifier [ integer_series ] .)
    DOTDIV          reduce using rule 84 (address -> identifier [ integer_series ] .)
    '               reduce using rule 84 (address -> identifier [ integer_series ] .)
    ;               reduce using rule 84 (address -> identifier [ integer_series ] .)
    EQ              reduce using rule 84 (address -> identifier [ integer_series ] .)
    NOTEQ           reduce using rule 84 (address -> identifier [ integer_series ] .)
    LESS            reduce using rule 84 (address -> identifier [ integer_series ] .)
    LESSEQ          reduce using rule 84 (address -> identifier [ integer_series ] .)
    MORE            reduce using rule 84 (address -> identifier [ integer_series ] .)
    MOREEQ          reduce using rule 84 (address -> identifier [ integer_series ] .)
    )               reduce using rule 84 (address -> identifier [ integer_series ] .)
    ,               reduce using rule 84 (address -> identifier [ integer_series ] .)
    ]               reduce using rule 84 (address -> identifier [ integer_series ] .)
    :               reduce using rule 84 (address -> identifier [ integer_series ] .)
    {               reduce using rule 84 (address -> identifier [ integer_series ] .)
    IF              reduce using rule 84 (address -> identifier [ integer_series ] .)
    WHILE           reduce using rule 84 (address -> identifier [ integer_series ] .)
    FOR             reduce using rule 84 (address -> identifier [ integer_series ] .)
    ID              reduce using rule 84 (address -> identifier [ integer_series ] .)
    ZEROS           reduce using rule 84 (address -> identifier [ integer_series ] .)
    ONES            reduce using rule 84 (address -> identifier [ integer_series ] .)
    EYE             reduce using rule 84 (address -> identifier [ integer_series ] .)
    RETURN          reduce using rule 84 (address -> identifier [ integer_series ] .)
    PRINT           reduce using rule 84 (address -> identifier [ integer_series ] .)
    BREAK           reduce using rule 84 (address -> identifier [ integer_series ] .)
    CONTINUE        reduce using rule 84 (address -> identifier [ integer_series ] .)
    INTNUM          reduce using rule 84 (address -> identifier [ integer_series ] .)
    FLOATNUM        reduce using rule 84 (address -> identifier [ integer_series ] .)
    STRING          reduce using rule 84 (address -> identifier [ integer_series ] .)


state 106

    (81) integer_series -> number , . integer_series
    (80) integer_series -> . number
    (81) integer_series -> . number , integer_series
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM

    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31

    number                         shift and go to state 85
    integer_series                 shift and go to state 122

state 107

    (18) operation -> function ( operand ) .

    ;               reduce using rule 18 (operation -> function ( operand ) .)
    EQ              reduce using rule 18 (operation -> function ( operand ) .)
    NOTEQ           reduce using rule 18 (operation -> function ( operand ) .)
    LESS            reduce using rule 18 (operation -> function ( operand ) .)
    LESSEQ          reduce using rule 18 (operation -> function ( operand ) .)
    MORE            reduce using rule 18 (operation -> function ( operand ) .)
    MOREEQ          reduce using rule 18 (operation -> function ( operand ) .)
    )               reduce using rule 18 (operation -> function ( operand ) .)


state 108

    (19) operation -> function ( operation ) .

    ;               reduce using rule 19 (operation -> function ( operation ) .)
    EQ              reduce using rule 19 (operation -> function ( operation ) .)
    NOTEQ           reduce using rule 19 (operation -> function ( operation ) .)
    LESS            reduce using rule 19 (operation -> function ( operation ) .)
    LESSEQ          reduce using rule 19 (operation -> function ( operation ) .)
    MORE            reduce using rule 19 (operation -> function ( operation ) .)
    MOREEQ          reduce using rule 19 (operation -> function ( operation ) .)
    )               reduce using rule 19 (operation -> function ( operation ) .)


state 109

    (79) series -> operand , series .

    ;               reduce using rule 79 (series -> operand , series .)
    EQ              reduce using rule 79 (series -> operand , series .)
    NOTEQ           reduce using rule 79 (series -> operand , series .)
    LESS            reduce using rule 79 (series -> operand , series .)
    LESSEQ          reduce using rule 79 (series -> operand , series .)
    MORE            reduce using rule 79 (series -> operand , series .)
    MOREEQ          reduce using rule 79 (series -> operand , series .)
    )               reduce using rule 79 (series -> operand , series .)
    ]               reduce using rule 79 (series -> operand , series .)


state 110

    (77) rows -> [ series ] , . rows
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    [               shift and go to state 123

    rows                           shift and go to state 124

state 111

    (61) conditional -> IF ( condition ) instruction .
    (63) conditional -> IF ( condition ) instruction . ELSE instruction
    (65) conditional -> IF ( condition ) instruction . ELSE { instruction_set }

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    IF              reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    WHILE           reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    FOR             reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    ID              reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    -               reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    ZEROS           reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    ONES            reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    EYE             reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    RETURN          reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    PRINT           reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    BREAK           reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    INTNUM          reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    FLOATNUM        reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    STRING          reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    [               reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    $end            reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    }               reduce using rule 61 (conditional -> IF ( condition ) instruction .)
    ELSE            shift and go to state 125

  ! ELSE            [ reduce using rule 61 (conditional -> IF ( condition ) instruction .) ]


state 112

    (62) conditional -> IF ( condition ) { . instruction_set }
    (64) conditional -> IF ( condition ) { . instruction_set } ELSE instruction
    (66) conditional -> IF ( condition ) { . instruction_set } ELSE { instruction_set }
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    }               reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction_set                shift and go to state 126
    instruction                    shift and go to state 3
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 113

    (57) condition -> operand relation operand .
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    )               reduce using rule 57 (condition -> operand relation operand .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 114

    (59) condition -> operand relation operation .

    )               reduce using rule 59 (condition -> operand relation operation .)


state 115

    (60) condition -> operation relation operation .

    )               reduce using rule 60 (condition -> operation relation operation .)


state 116

    (58) condition -> operation relation operand .
    (16) operation -> operand . operator operand
    (17) operation -> operand . operator operation
    (21) operation -> operand . selfoperator
    (31) operator -> . +
    (32) operator -> . -
    (33) operator -> . *
    (34) operator -> . /
    (35) operator -> . DOTADD
    (36) operator -> . DOTSUB
    (37) operator -> . DOTMUL
    (38) operator -> . DOTDIV
    (39) selfoperator -> . '

    )               reduce using rule 58 (condition -> operation relation operand .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

    operator                       shift and go to state 50
    selfoperator                   shift and go to state 51

state 117

    (67) loopconditional -> WHILE ( condition ) instruction .

    {               reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    IF              reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    ID              reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    -               reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    ZEROS           reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    ONES            reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    EYE             reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    INTNUM          reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    FLOATNUM        reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    [               reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    $end            reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    }               reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 67 (loopconditional -> WHILE ( condition ) instruction .)


state 118

    (68) loopconditional -> WHILE ( condition ) { . instruction_set }
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    }               reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction_set                shift and go to state 127
    instruction                    shift and go to state 3
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 119

    (69) loopconditional -> FOR identifier = range instruction .

    {               reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    IF              reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    WHILE           reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    FOR             reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    ID              reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    -               reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    ZEROS           reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    ONES            reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    EYE             reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    RETURN          reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    PRINT           reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    BREAK           reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    CONTINUE        reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    INTNUM          reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    FLOATNUM        reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    STRING          reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    [               reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    $end            reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    }               reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)
    ELSE            reduce using rule 69 (loopconditional -> FOR identifier = range instruction .)


state 120

    (70) loopconditional -> FOR identifier = range { . instruction_set }
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    }               reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    identifier                     shift and go to state 13
    instruction_set                shift and go to state 128
    instruction                    shift and go to state 3
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 121

    (71) range -> operand : . operand
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    operand                        shift and go to state 129
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 122

    (81) integer_series -> number , integer_series .

    ]               reduce using rule 81 (integer_series -> number , integer_series .)


state 123

    (76) rows -> [ . series ]
    (77) rows -> [ . series ] , rows
    (78) series -> . operand
    (79) series -> . operand , series
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (8) identifier -> . ID
    (9) identifier -> . address
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (84) address -> . identifier [ integer_series ]
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    -               shift and go to state 21
    ID              shift and go to state 17
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    series                         shift and go to state 72
    rows                           shift and go to state 34
    operand                        shift and go to state 73
    identifier                     shift and go to state 63
    number                         shift and go to state 19
    structure                      shift and go to state 20
    address                        shift and go to state 64
    matrix                         shift and go to state 32

state 124

    (77) rows -> [ series ] , rows .

    +               reduce using rule 77 (rows -> [ series ] , rows .)
    -               reduce using rule 77 (rows -> [ series ] , rows .)
    *               reduce using rule 77 (rows -> [ series ] , rows .)
    /               reduce using rule 77 (rows -> [ series ] , rows .)
    DOTADD          reduce using rule 77 (rows -> [ series ] , rows .)
    DOTSUB          reduce using rule 77 (rows -> [ series ] , rows .)
    DOTMUL          reduce using rule 77 (rows -> [ series ] , rows .)
    DOTDIV          reduce using rule 77 (rows -> [ series ] , rows .)
    '               reduce using rule 77 (rows -> [ series ] , rows .)
    ;               reduce using rule 77 (rows -> [ series ] , rows .)
    EQ              reduce using rule 77 (rows -> [ series ] , rows .)
    NOTEQ           reduce using rule 77 (rows -> [ series ] , rows .)
    LESS            reduce using rule 77 (rows -> [ series ] , rows .)
    LESSEQ          reduce using rule 77 (rows -> [ series ] , rows .)
    MORE            reduce using rule 77 (rows -> [ series ] , rows .)
    MOREEQ          reduce using rule 77 (rows -> [ series ] , rows .)
    )               reduce using rule 77 (rows -> [ series ] , rows .)
    ,               reduce using rule 77 (rows -> [ series ] , rows .)
    ]               reduce using rule 77 (rows -> [ series ] , rows .)
    :               reduce using rule 77 (rows -> [ series ] , rows .)
    {               reduce using rule 77 (rows -> [ series ] , rows .)
    IF              reduce using rule 77 (rows -> [ series ] , rows .)
    WHILE           reduce using rule 77 (rows -> [ series ] , rows .)
    FOR             reduce using rule 77 (rows -> [ series ] , rows .)
    ID              reduce using rule 77 (rows -> [ series ] , rows .)
    ZEROS           reduce using rule 77 (rows -> [ series ] , rows .)
    ONES            reduce using rule 77 (rows -> [ series ] , rows .)
    EYE             reduce using rule 77 (rows -> [ series ] , rows .)
    RETURN          reduce using rule 77 (rows -> [ series ] , rows .)
    PRINT           reduce using rule 77 (rows -> [ series ] , rows .)
    BREAK           reduce using rule 77 (rows -> [ series ] , rows .)
    CONTINUE        reduce using rule 77 (rows -> [ series ] , rows .)
    INTNUM          reduce using rule 77 (rows -> [ series ] , rows .)
    FLOATNUM        reduce using rule 77 (rows -> [ series ] , rows .)
    STRING          reduce using rule 77 (rows -> [ series ] , rows .)
    [               reduce using rule 77 (rows -> [ series ] , rows .)


state 125

    (63) conditional -> IF ( condition ) instruction ELSE . instruction
    (65) conditional -> IF ( condition ) instruction ELSE . { instruction_set }
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 131
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction                    shift and go to state 130
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 126

    (62) conditional -> IF ( condition ) { instruction_set . }
    (64) conditional -> IF ( condition ) { instruction_set . } ELSE instruction
    (66) conditional -> IF ( condition ) { instruction_set . } ELSE { instruction_set }

    }               shift and go to state 132


state 127

    (68) loopconditional -> WHILE ( condition ) { instruction_set . }

    }               shift and go to state 133


state 128

    (70) loopconditional -> FOR identifier = range { instruction_set . }

    }               shift and go to state 134


state 129

    (71) range -> operand : operand .

    {               reduce using rule 71 (range -> operand : operand .)
    IF              reduce using rule 71 (range -> operand : operand .)
    WHILE           reduce using rule 71 (range -> operand : operand .)
    FOR             reduce using rule 71 (range -> operand : operand .)
    ID              reduce using rule 71 (range -> operand : operand .)
    -               reduce using rule 71 (range -> operand : operand .)
    ZEROS           reduce using rule 71 (range -> operand : operand .)
    ONES            reduce using rule 71 (range -> operand : operand .)
    EYE             reduce using rule 71 (range -> operand : operand .)
    RETURN          reduce using rule 71 (range -> operand : operand .)
    PRINT           reduce using rule 71 (range -> operand : operand .)
    BREAK           reduce using rule 71 (range -> operand : operand .)
    CONTINUE        reduce using rule 71 (range -> operand : operand .)
    INTNUM          reduce using rule 71 (range -> operand : operand .)
    FLOATNUM        reduce using rule 71 (range -> operand : operand .)
    STRING          reduce using rule 71 (range -> operand : operand .)
    [               reduce using rule 71 (range -> operand : operand .)


state 130

    (63) conditional -> IF ( condition ) instruction ELSE instruction .

    {               reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    -               reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    ZEROS           reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    ONES            reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    EYE             reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    INTNUM          reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    [               reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 63 (conditional -> IF ( condition ) instruction ELSE instruction .)


state 131

    (65) conditional -> IF ( condition ) instruction ELSE { . instruction_set }
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    }               reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction                    shift and go to state 3
    instruction_set                shift and go to state 135
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 132

    (62) conditional -> IF ( condition ) { instruction_set } .
    (64) conditional -> IF ( condition ) { instruction_set } . ELSE instruction
    (66) conditional -> IF ( condition ) { instruction_set } . ELSE { instruction_set }

  ! shift/reduce conflict for ELSE resolved as shift
    {               reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    IF              reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    WHILE           reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    FOR             reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    ID              reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    -               reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    ZEROS           reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    ONES            reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    EYE             reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    RETURN          reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    PRINT           reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    BREAK           reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    CONTINUE        reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    INTNUM          reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    FLOATNUM        reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    STRING          reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    [               reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    $end            reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    }               reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .)
    ELSE            shift and go to state 136

  ! ELSE            [ reduce using rule 62 (conditional -> IF ( condition ) { instruction_set } .) ]


state 133

    (68) loopconditional -> WHILE ( condition ) { instruction_set } .

    {               reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    IF              reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    WHILE           reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    FOR             reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    ID              reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    -               reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    ZEROS           reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    ONES            reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    EYE             reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    RETURN          reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    PRINT           reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    BREAK           reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    CONTINUE        reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    INTNUM          reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    FLOATNUM        reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    STRING          reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    [               reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    $end            reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    }               reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)
    ELSE            reduce using rule 68 (loopconditional -> WHILE ( condition ) { instruction_set } .)


state 134

    (70) loopconditional -> FOR identifier = range { instruction_set } .

    {               reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    IF              reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    WHILE           reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    FOR             reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    ID              reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    -               reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    ZEROS           reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    ONES            reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    EYE             reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    RETURN          reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    PRINT           reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    BREAK           reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    CONTINUE        reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    INTNUM          reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    FLOATNUM        reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    STRING          reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    [               reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    $end            reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    }               reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)
    ELSE            reduce using rule 70 (loopconditional -> FOR identifier = range { instruction_set } .)


state 135

    (65) conditional -> IF ( condition ) instruction ELSE { instruction_set . }

    }               shift and go to state 137


state 136

    (64) conditional -> IF ( condition ) { instruction_set } ELSE . instruction
    (66) conditional -> IF ( condition ) { instruction_set } ELSE . { instruction_set }
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 138
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction                    shift and go to state 139
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 137

    (65) conditional -> IF ( condition ) instruction ELSE { instruction_set } .

    {               reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    IF              reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    WHILE           reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    FOR             reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    ID              reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    -               reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    ZEROS           reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    ONES            reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    EYE             reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    RETURN          reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    PRINT           reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    BREAK           reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    CONTINUE        reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    INTNUM          reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    FLOATNUM        reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    STRING          reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    [               reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    $end            reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    }               reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)
    ELSE            reduce using rule 65 (conditional -> IF ( condition ) instruction ELSE { instruction_set } .)


state 138

    (66) conditional -> IF ( condition ) { instruction_set } ELSE { . instruction_set }
    (5) instruction_set -> . instruction instruction_set
    (6) instruction_set -> . { instruction_set }
    (7) instruction_set -> .
    (2) instruction -> . expression
    (3) instruction -> . conditional
    (4) instruction -> . loopconditional
    (10) expression -> . assignment ;
    (11) expression -> . operation ;
    (61) conditional -> . IF ( condition ) instruction
    (62) conditional -> . IF ( condition ) { instruction_set }
    (63) conditional -> . IF ( condition ) instruction ELSE instruction
    (64) conditional -> . IF ( condition ) { instruction_set } ELSE instruction
    (65) conditional -> . IF ( condition ) instruction ELSE { instruction_set }
    (66) conditional -> . IF ( condition ) { instruction_set } ELSE { instruction_set }
    (67) loopconditional -> . WHILE ( condition ) instruction
    (68) loopconditional -> . WHILE ( condition ) { instruction_set }
    (69) loopconditional -> . FOR identifier = range instruction
    (70) loopconditional -> . FOR identifier = range { instruction_set }
    (12) assignment -> . identifier = operand
    (13) assignment -> . identifier = operation
    (14) assignment -> . identifier assignoperation operand
    (15) assignment -> . identifier assignoperation operation
    (16) operation -> . operand operator operand
    (17) operation -> . operand operator operation
    (18) operation -> . function ( operand )
    (19) operation -> . function ( operation )
    (20) operation -> . reservedoperation
    (21) operation -> . operand selfoperator
    (8) identifier -> . ID
    (9) identifier -> . address
    (26) operand -> . identifier
    (27) operand -> . number
    (28) operand -> . structure
    (29) operand -> . - operand
    (30) operand -> . address
    (40) function -> . ZEROS
    (41) function -> . ONES
    (42) function -> . EYE
    (43) reservedoperation -> . RETURN operation
    (44) reservedoperation -> . RETURN operand
    (45) reservedoperation -> . RETURN
    (46) reservedoperation -> . PRINT series
    (47) reservedoperation -> . PRINT operation
    (48) reservedoperation -> . PRINT operand
    (49) reservedoperation -> . BREAK
    (50) reservedoperation -> . CONTINUE
    (84) address -> . identifier [ integer_series ]
    (82) number -> . INTNUM
    (83) number -> . FLOATNUM
    (72) structure -> . matrix
    (73) structure -> . STRING
    (74) matrix -> . rows
    (75) matrix -> . [ rows ]
    (76) rows -> . [ series ]
    (77) rows -> . [ series ] , rows

    {               shift and go to state 4
    }               reduce using rule 7 (instruction_set -> .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    FOR             shift and go to state 12
    ID              shift and go to state 17
    -               shift and go to state 21
    ZEROS           shift and go to state 22
    ONES            shift and go to state 23
    EYE             shift and go to state 24
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    INTNUM          shift and go to state 30
    FLOATNUM        shift and go to state 31
    STRING          shift and go to state 33
    [               shift and go to state 29

    instruction_set                shift and go to state 140
    instruction                    shift and go to state 3
    expression                     shift and go to state 5
    conditional                    shift and go to state 6
    loopconditional                shift and go to state 7
    assignment                     shift and go to state 8
    operation                      shift and go to state 9
    identifier                     shift and go to state 13
    operand                        shift and go to state 14
    function                       shift and go to state 15
    reservedoperation              shift and go to state 16
    address                        shift and go to state 18
    number                         shift and go to state 19
    structure                      shift and go to state 20
    matrix                         shift and go to state 32
    rows                           shift and go to state 34

state 139

    (64) conditional -> IF ( condition ) { instruction_set } ELSE instruction .

    {               reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    IF              reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    WHILE           reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    FOR             reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    ID              reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    -               reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    ZEROS           reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    ONES            reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    EYE             reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    RETURN          reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    PRINT           reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    BREAK           reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    CONTINUE        reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    INTNUM          reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    FLOATNUM        reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    STRING          reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    [               reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    $end            reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    }               reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)
    ELSE            reduce using rule 64 (conditional -> IF ( condition ) { instruction_set } ELSE instruction .)


state 140

    (66) conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set . }

    }               shift and go to state 141


state 141

    (66) conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .

    {               reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    IF              reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    WHILE           reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    FOR             reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    ID              reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    -               reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    ZEROS           reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    ONES            reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    EYE             reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    RETURN          reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    PRINT           reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    BREAK           reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    CONTINUE        reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    INTNUM          reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    FLOATNUM        reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    STRING          reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    [               reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    $end            reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    }               reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)
    ELSE            reduce using rule 66 (conditional -> IF ( condition ) { instruction_set } ELSE { instruction_set } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 63 resolved as shift
WARNING: shift/reduce conflict for ] in state 71 resolved as shift
WARNING: shift/reduce conflict for , in state 92 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 111 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (identifier -> address)
WARNING: rejected rule (operand -> address) in state 18
WARNING: reduce/reduce conflict in state 64 resolved using rule (identifier -> address)
WARNING: rejected rule (operand -> address) in state 64
WARNING: reduce/reduce conflict in state 69 resolved using rule (reservedoperation -> PRINT operand)
WARNING: rejected rule (series -> operand) in state 69
WARNING: Rule (operand -> address) is never reduced
